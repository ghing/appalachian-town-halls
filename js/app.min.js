(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TownHalls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MeetingStore = function () {
  function MeetingStore() {
    _classCallCheck(this, MeetingStore);

    this._meetings = [];
    this._meetingsByDate = {};
    this._meetingsByOfficial = {};
    this._meetingsByDivision = {};
    this._officials = [];
    this._officialsByDivision = {};
  }

  _createClass(MeetingStore, [{
    key: "setOfficials",
    value: function setOfficials(officials) {
      this._officials = officials;
      this._setMeetingsFromOfficials(this._officials);
    }
  }, {
    key: "getOfficials",
    value: function getOfficials() {
      return this._officials;
    }
  }, {
    key: "_setMeetingsFromOfficials",
    value: function _setMeetingsFromOfficials(officials) {
      var _this = this;

      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      this._meetings = [];
      this._meetingsByDate = {};
      this._officialsByDivision = {};

      officials.forEach(function (official) {
        _this._officialsByDivision[official.office.division.ocd_id] = official;

        official.meetings.forEach(function (meeting) {
          meeting.official = official;
          _this.addMeeting(meeting);
        });
      });

      if (sort) {
        this._sortMeetingsByDate();
      }

      return this;
    }
  }, {
    key: "_sortMeetingsByDate",
    value: function _sortMeetingsByDate() {
      this._meetings.sort(function (a, b) {
        if (a.date > b.date) {
          return -1;
        }

        if (a.date < b.date) {
          return 1;
        }

        return 0;
      });
    }
  }, {
    key: "addMeeting",
    value: function addMeeting(meeting) {
      this._meetings.push(meeting);

      if (!this._meetingsByDate[meeting.date]) {
        this._meetingsByDate[meeting.date] = [];
      }
      this._meetingsByDate[meeting.date].push(meeting);

      if (!this._meetingsByOfficial[meeting.official.id]) {
        this._meetingsByOfficial[meeting.official.id] = [];
      }
      this._meetingsByOfficial[meeting.official.id].push(meeting);

      var ocdId = meeting.official.office.division.ocd_id;
      if (!this._meetingsByDivision[ocdId]) {
        this._meetingsByDivision[ocdId] = [];
      }
      this._meetingsByDivision[ocdId].push(meeting);

      return this;
    }
  }, {
    key: "getMeetings",
    value: function getMeetings() {
      return this._meetings;
    }
  }, {
    key: "getMeetingsForDate",
    value: function getMeetingsForDate(date, filter) {
      var meetings = this._meetingsByDate[date];
      if (!meetings) {
        return [];
      }

      if (filter) {
        return meetings.filter(filter);
      }

      return meetings;
    }
  }, {
    key: "getMeetingsForOfficial",
    value: function getMeetingsForOfficial(officialId) {
      return this._meetingsByOfficial[officialId];
    }
  }, {
    key: "getMeetingsForDivision",
    value: function getMeetingsForDivision(ocdId) {
      var meetings = this._meetingsByDivision[ocdId];
      if (!meetings) {
        return [];
      }

      return meetings;
    }
  }, {
    key: "getOfficialForDivision",
    value: function getOfficialForDivision(ocdId) {
      return this._officialsByDivision[ocdId];
    }
  }, {
    key: "getAvgMeetings",
    value: function getAvgMeetings() {
      return Math.round(this._meetings.length / this._officials.length);
    }
  }]);

  return MeetingStore;
}();

exports.default = MeetingStore;

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.App = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require('d3');

var d3 = _interopRequireWildcard(_d);

var _MeetingStore = require('./MeetingStore');

var _MeetingStore2 = _interopRequireDefault(_MeetingStore);

var _timeline = require('./timeline');

var _timeline2 = _interopRequireDefault(_timeline);

var _repsearch = require('./repsearch');

var _repsearch2 = _interopRequireDefault(_repsearch);

var _repcontext = require('./repcontext');

var _repcontext2 = _interopRequireDefault(_repcontext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_LABELS = {
  noDistrictFound: "Could not find a district matching this address",
  multipleDistrictsFound: "Found more than one districts matching this address",
  districtName: function districtName(_districtName) {
    return 'This address is in ' + _districtName + '.';
  },
  officialName: function officialName(_officialName) {
    return 'The representative for this district is ' + _officialName + '.';
  },
  avgMeetings: function avgMeetings(numMeetings) {
    var s = numMeetings == 1 ? '' : 's';
    return 'This representative has held ' + numMeetings + ' meeting' + s + ', the average for Appalachian representatives.';
  },
  aboveAvgMeetings: function aboveAvgMeetings(numMeetings, avgMeetings) {
    var s = numMeetings == 1 ? '' : 's';
    return 'This representative has held ' + numMeetings + ' meeting' + s + ', more than the average for Appalachian representatives.';
  },
  belowAvgMeetings: function belowAvgMeetings(numMeetings, avgMeetings) {
    var s = numMeetings == 1 ? '' : 's';
    var numMeetingsWord = numMeetings == 0 ? 'no' : numMeetings;
    return 'This representative has held ' + numMeetingsWord + ' meeting' + s + ', below the average of ' + avgMeetings + ' for Appalachian representatives.';
  }
};

var App = exports.App = function () {
  function App(options) {
    var _this = this;

    _classCallCheck(this, App);

    this._timelineContainer = options.timelineContainer;
    this._repSearchContainer = options.repSearchContainer;
    this._repContextContainer = options.repContextContainer;
    this._googleApiKey = options.googleApiKey;
    this._labels = options.labels || DEFAULT_LABELS;
    this._meetingStore = new _MeetingStore2.default();
    this._startDate = options.startDate || new Date(2017, 0, 20);
    this._endDate = options.endDate || new Date();
    this._annotations = options.annotations || {
      "2017-01-20": {
        label: "Inauguration day"
      },
      "2017-02-20": {
        label: "District work period begins"
      },
      "2017-02-24": {
        label: "District work period ends"
      },
      "2017-04-10": {
        label: "District work period begins"
      },
      "2017-04-21": {
        label: "District work period ends"
      }
    };

    // Explicitely bind this method to the instance so that we can access
    // `this` when the method is used as a callback
    this._handleAddress = this._handleAddress.bind(this);
    this._handleReset = this._handleReset.bind(this);

    // Construct some d3 components
    this._timeline = (0, _timeline2.default)();
    this._search = (0, _repsearch2.default)().handleAddress(this._handleAddress).handleReset(this._handleReset);
    this._context = (0, _repcontext2.default)().labels(this._labels);

    // These are the state variables
    this._allDays = [];
    this._searchAddress = null;

    d3.json(options.officialMeetingsJsonUrl, function (data) {
      _this._meetingStore.setOfficials(data.objects);
      _this._allDays = _this._meetingsByDay(_this._meetingStore, _this._startDate, _this._endDate, _this._annotations);

      _this._renderTimeline(_this._allDays);

      d3.select(_this._repSearchContainer).call(_this._search);
    });
  }

  _createClass(App, [{
    key: '_handleReset',
    value: function _handleReset() {
      if (this._searchAddress !== null) {
        this._renderTimeline(this._allDays);
        d3.select(this._repContextContainer).datum(null).call(this._context);
      }
    }
  }, {
    key: '_renderTimeline',
    value: function _renderTimeline(days) {
      d3.select(this._timelineContainer).datum(days).call(this._timeline);
    }
  }, {
    key: '_handleAddress',
    value: function _handleAddress(address, callback) {
      var _this2 = this;

      this._searchAddress = address;

      // Use the Google Civic Information API to lookup the U.S. Representative
      // for an address.
      //
      // See https://developers.google.com/civic-information/docs/v2/representatives/representativeInfoByAddress
      // for API docs.
      // A few quick notes:
      //
      // We just need to look up reps by their district, so we just need the
      // political division and not data about offices.  We exclude office data
      // by specifying `includeOffices=false`
      //
      // `levels=country` and `roles=legislatorLowerBody` specifies that we only
      // care about the house.
      var url = 'https://content.googleapis.com/civicinfo/v2/representatives?address=' + encodeURIComponent(address) + '&includeOffices=false&levels=country&roles=legislatorLowerBody&alt=json&key=' + this._googleApiKey;

      d3.json(url, function (data) {
        if (!data) {
          callback({
            msg: _this2._labels.noDistrictFound
          }, null);
          return;
        }
        // Divisions is an object keyed by OCD ID. We need a list of these IDs.
        var divisions = Object.keys(data.divisions);

        // There should be one and only one congressional district for an address
        if (divisions.length != 1) {
          callback({
            msg: division.length == 0 ? _this2._labels.noDistrictFound : _this2._labels.multipleDistrictsFound
          }, null);
        }

        // Success
        var ocdId = divisions[0];
        var districtName = data.divisions[ocdId].name;

        // Tell the form
        callback(null, {});

        var meetingsForDivision = _this2._meetingStore.getMeetingsForDivision(divisions[0]);
        var meetingIds = meetingsForDivision.reduce(function (lookup, meeting) {
          lookup[meeting.id] = true;
          return lookup;
        }, {});

        d3.select(_this2._repContextContainer).datum({
          official: _this2._meetingStore.getOfficialForDivision(ocdId),
          numMeetings: meetingsForDivision.length,
          avgMeetings: _this2._meetingStore.getAvgMeetings(),
          districtName: districtName
        }).call(_this2._context);

        var days = _this2._meetingsByDay(_this2._meetingStore, _this2._startDate, _this2._endDate, _this2._annotations, function (meeting) {
          return meetingIds[meeting.id];
        });
        _this2._renderTimeline(days);
      });
    }
  }, {
    key: '_meetingsByDay',
    value: function _meetingsByDay(meetingStore, startDate, endDate, annotations, filter) {
      var days = [];
      var format = d3.timeFormat("%Y-%m-%d");

      d3.timeDay.range(startDate, endDate, 1).forEach(function (date, i) {
        var dateStr = format(date);
        var meetings = meetingStore.getMeetingsForDate(dateStr, filter);

        if (meetings.length == 0 && !annotations[dateStr]) {
          return;
        }

        days.push({
          day: i + 1,
          date: date,
          meetings: meetings,
          label: annotations[dateStr] ? annotations[dateStr].label : null
        });
      });

      return days.reverse();
    }
  }]);

  return App;
}();

},{"./MeetingStore":1,"./repcontext":3,"./repsearch":4,"./timeline":5,"d3":"d3"}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = repContext;

var _d = require('d3');

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function repContext() {
  var labels = {};

  var context = function context(selection) {
    selection.each(function (data) {
      var sel = d3.select(this);

      sel.selectAll('*').remove();

      if (!data) {
        return;
      }

      var el = sel.append('div').attr('class', 'representative-context');

      if (data.districtName) {
        el.append('span').text(labels.districtName(data.districtName));
      }

      if (data.official) {
        el.append('span').text(labels.officialName(data.official.name));
      }

      if (data.numMeetings == data.avgMeetings) {
        el.append('span').text(labels.avgMeetings(data.numMeetings));
      } else if (data.numMeetings > data.avgMeetings) {
        el.append('span').text(labels.aboveAvgMeetings(data.numMeetings, data.avgMeetings));
      } else {
        el.append('span').text(labels.belowAvgMeetings(data.numMeetings, data.avgMeetings));
      }
    });
  };

  context.labels = function (val) {
    if (!val) {
      return labels;
    }

    labels = val;
    return this;
  };

  return context;
}

},{"d3":"d3"}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = repSearch;

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function repSearch() {
  var handleAddress = function handleAddress() {};
  var handleReset = function handleReset() {};
  var messages = null;

  var receiveResponse = function receiveResponse(err, data) {
    if (err) {
      messages.text(err.msg);
      return;
    }

    messages.text("");
  };

  var handleSubmit = function handleSubmit() {
    d3.event.preventDefault();

    var form = d3.select(d3.event.target);
    var address = form.select('.representative-search-form__address-input').node().value;

    if (!address) {
      // Don't allow an empty address
      return false;
    }

    messages = form.select('.representative-search-form__messages');
    handleAddress(address, receiveResponse);
  };

  var search = function search(selection) {
    selection.each(function () {
      var sel = d3.select(this);

      sel.selectAll('*').remove();

      var form = sel.append('form').attr('class', 'representative-search-form').on('submit', handleSubmit);

      form.append('input').attr('type', 'text').attr('class', 'representative-search-form__address-input').attr('placeholder', "Enter your address");

      form.append('button').attr('type', 'submit').text("Find your representative").attr('class', 'representative-search-form__btn representative-search-form__btn--submit');

      form.append('button').attr('type', 'reset').text("Start over").on('click', function () {
        messages.text("");
        messages.selectAll('*').remove();
        handleReset();
      }).attr('class', 'representative-search-form__btn representative-search-form__btn--reset');

      form.append('div').attr('class', 'representative-search-form__messages');
    });
  };

  search.handleAddress = function (val) {
    if (!val) {
      return handleAddress;
    }

    handleAddress = val;
    return this;
  };

  search.handleReset = function (val) {
    if (!val) {
      return handleReset;
    }

    handleReset = val;
    return this;
  };

  return search;
}

},{"d3":"d3"}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = meetingTimeline;

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function ocdIdToDistrict(ocdId) {
  var bits = ocdId.split(':');
  var state = bits[bits.length - 2].slice(0, 2).toUpperCase();
  var district = bits[bits.length - 1];
  return state + "-" + district;
}

function officialDistrict(official) {
  return ocdIdToDistrict(official.office.division.ocd_id);
}

function meetingsByOfficial(meetings) {
  var byOfficial = meetings.reduce(function (lookup, meeting) {
    if (!lookup[meeting.official.id]) {
      lookup[meeting.official.id] = {
        official: meeting.official,
        meetings: []
      };
    }
    lookup[meeting.official.id].meetings.push(meeting);
    return lookup;
  }, {});

  return d3.values(byOfficial);
}

function getPartyLabel(party) {
  if (party == "Republican") {
    return "R";
  } else if (party == "Democratic") {
    return "D";
  }
}

function renderOfficial(sel) {
  sel.each(function (d) {
    var el = d3.select(this);

    var partyLabel = getPartyLabel(d.official.party);
    var officialClass = "timeline__meeting__official";
    if (partyLabel) {
      officialClass += " timeline__meeting__official--" + partyLabel.toLowerCase();
    }

    el.append('span').attr('class', officialClass).text(d.official.name);

    if (partyLabel) {
      el.append('span').attr('class', 'timeline__meeting__party timeline__meeting__party--' + partyLabel.toLowerCase()).text(" (" + partyLabel + ")");
    }

    el.append('span').attr('class', 'timeline__meeting__district').text(" (" + officialDistrict(d.official) + ")");

    if (d.meetings.length == 1) {
      if (d.meetings[0].meeting_type == "telephone") {
        el.append('span').attr('class', 'timeline__meeting__type timeline__meeting__type--telephone').text(" \u260E");
      } else if (d.meetings[0].meeting_type == "facebook") {
        el.append('span').attr('class', 'timeline__meeting__type timeline__meeting__type--facebook').text(" f");
      } else if (d.meetings[0].meeting_type == "radio") {
        el.append('span').attr('class', 'timeline__meeting__type timeline__meeting__type--radio').text(" \u1F4FB");
      }
    }

    if (d.meetings.length > 1) {
      el.append('span').attr('class', 'timeline__meeting__count').text(" x" + d.meetings.length);
    }
  });
}

function renderDay(sel, dateFormat) {
  sel.append('h2').attr('class', 'timeline__day__number').text(function (d) {
    return d.day;
  });

  sel.append('div').attr('class', 'timeline__day__date').text(function (d) {
    return dateFormat(d.date);
  });

  sel.append('div').attr('class', 'timeline__day__label').text(function (d) {
    return d.label;
  });

  sel.selectAll('.timeline__meeting').data(function (d) {
    return meetingsByOfficial(d.meetings);
  }).enter().append('div').attr('class', 'timeline__meeting').call(renderOfficial);
}

function meetingTimeline() {
  var dateFormat = d3.timeFormat("%B %d, %Y");

  function timeline(selection) {
    selection.each(function (days) {
      var container = d3.select(this);
      container.selectAll('*').remove();

      var timeline = container.append('div').attr('class', 'timeline');

      timeline.selectAll('.timeline__day').data(days).enter().append('div').attr('class', 'timeline__day').call(renderDay, dateFormat);
    });
  }

  return timeline;
}

},{"d3":"d3"}]},{},[2])(2)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

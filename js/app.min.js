(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TownHalls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _classCallCheck(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}function setDefault(e,i,t){return i in e||(e[i]=t),e[i]}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,i){for(var t=0;t<i.length;t++){var n=i[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(i,t,n){return t&&e(i.prototype,t),n&&e(i,n),i}}(),MeetingStore=function(){function e(){_classCallCheck(this,e),this.meetings=[],this.phoneMeetings=[],this.meetingsByDate={},this.meetingsByOfficial={},this.meetingsByDivision={},this.phoneMeetingsByDivision={},this.officials=[],this.officialsByDivision={},this.phoneOnlyByDivision={}}return _createClass(e,[{key:"setOfficials",value:function(e){this.officials=e,this.setMeetingsFromOfficials(this.officials)}},{key:"getOfficials",value:function(){return this.officials}},{key:"setMeetingsFromOfficials",value:function(e){var i=this,t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.meetings=[],this.meetingsByDate={},this.officialsByDivision={},e.forEach(function(e){i.officialsByDivision[e.office.division.ocd_id]=e,e.meetings.forEach(function(t){t.official=e,i.addMeeting(t)})}),t&&this.sortMeetingsByDate(),this}},{key:"sortMeetingsByDate",value:function(){this.meetings.sort(function(e,i){return e.date>i.date?-1:e.date<i.date?1:0})}},{key:"addMeeting",value:function(e){this.meetings.push(e),"telephone"===e.meeting_type&&this.phoneMeetings.push(e),setDefault(this.meetingsByDate,e.date,[]).push(e),setDefault(this.meetingsByOfficial,e.official.id,[]).push(e);var i=e.official.office.division.ocd_id;return setDefault(this.meetingsByDivision,i,[]).push(e),setDefault(this.phoneMeetingsByDivision,i,[]).push(e),this.phoneMeetingsByDivision.length===this.meetingsByDivision.length?this.phoneOnlyByDivision[i]=!0:this.phoneOnlyByDivision[i]=!1,this}},{key:"getMeetings",value:function(){return this.meetings}},{key:"getPhoneMeetings",value:function(){return this.phoneMeetings}},{key:"getMeetingsForDate",value:function(e,i){var t=this.meetingsByDate[e];return t?i?t.filter(i):t:[]}},{key:"getMeetingsForOfficial",value:function(e){return this.meetingsByOfficial[e]}},{key:"getMeetingsForDivision",value:function(e){var i=this.meetingsByDivision[e];return i||[]}},{key:"getPhoneMeetingsForDivision",value:function(e){var i=this.phoneMeetingsByDivision[e];return i||[]}},{key:"getOfficialForDivision",value:function(e){return this.officialsByDivision[e]}},{key:"getAvgMeetings",value:function(){return Math.round(this.meetings.length/this.officials.length)}},{key:"getPercentPhoneMeetings",value:function(){return this.phoneMeetings.length/this.meetings.length}}]),e}();exports.default=MeetingStore;


},{}],2:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var i=t[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}(),VoteStore=function(){function e(){_classCallCheck(this,e),this.votes=[],this.votesByDivision={}}return _createClass(e,[{key:"setVotes",value:function(e){return this.votes=[],this.votesByDivision={},e.forEach(this.addVote,this),this}},{key:"addVote",value:function(e){this.votes.push(e),this.votesByDivision[e.ocd_id]=e}},{key:"getVotes",value:function(){return this.votes}},{key:"getVoteForDivision",value:function(e){return this.votesByDivision[e]}}]),e}();exports.default=VoteStore;


},{}],3:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.App=void 0;var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();require("core-js/fn/object/assign"),require("es6-promise/auto"),require("isomorphic-fetch");var _d=require("d3"),d3=_interopRequireWildcard(_d),_districtInAppalachia=require("appalachia/lib/cd/district-in-appalachia"),_districtInAppalachia2=_interopRequireDefault(_districtInAppalachia),_MeetingStore=require("./MeetingStore"),_MeetingStore2=_interopRequireDefault(_MeetingStore),_VoteStore=require("./VoteStore"),_VoteStore2=_interopRequireDefault(_VoteStore),_timeline=require("./timeline"),_timeline2=_interopRequireDefault(_timeline),_repsearch=require("./repsearch"),_repsearch2=_interopRequireDefault(_repsearch),_repcontext=require("./repcontext"),_repcontext2=_interopRequireDefault(_repcontext),App=exports.App=function(){function e(t){var i=this;_classCallCheck(this,e),this.timelineContainer=t.timelineContainer,this.repSearchContainer=t.repSearchContainer,this.repContextContainer=t.repContextContainer,this.googleApiKey=t.googleApiKey,this.labels=Object.assign({multipleDistrictsFound:"Found more than one districts matching this address.",noDistrictFound:"Could not find a district matching this address.",nonAppalachianRep:"This representative's district does not include one of the counties in Appalachia.  This app only provides information about representatives from Appalachia."},t.labels),this.meetingStore=new _MeetingStore2.default,this.voteStore=new _VoteStore2.default,this.startDate=t.startDate||new Date(2017,0,20),this.endDate=t.endDate||new Date,this.annotations=t.annotations||{"2017-01-20":{label:"Inauguration day"},"2017-02-20":{label:"District work period begins"},"2017-02-24":{label:"District work period ends"},"2017-04-10":{label:"District work period begins"},"2017-04-21":{label:"District work period ends"},"2017-05-30":{label:"District work period begins"},"2017-06-02":{label:"District work period ends"}},this.handleAddress=this.handleAddress.bind(this),this.handleReset=this.handleReset.bind(this),this.timeline=(0,_timeline2.default)(),this.search=(0,_repsearch2.default)().handleAddress(this.handleAddress).handleReset(this.handleReset),this.context=(0,_repcontext2.default)().labels(this.labels),this.allDays=[],this.searchAddress=null;var n=fetch(t.officialMeetingsJsonUrl).then(function(e){return e.json()}).then(function(e){return e.objects}),r=fetch(t.ahcaVotesJsonUrl).then(function(e){return e.json()}).then(function(e){return e.votes});Promise.all([n,r]).then(function(t){var n=t[0],r=t[1];i.meetingStore.setOfficials(n),i.voteStore.setVotes(r),i.allDays=e.meetingsByDay(i.meetingStore,i.startDate,i.endDate,i.annotations),i.renderTimeline(i.allDays),d3.select(i.repSearchContainer).call(i.search)})}return _createClass(e,[{key:"handleReset",value:function(){null!==this.searchAddress&&(this.renderTimeline(this.allDays),d3.select(this.repContextContainer).datum(null).call(this.context))}},{key:"renderTimeline",value:function(e){d3.select(this.timelineContainer).datum(e).call(this.timeline,this.ahcaVoteForDivision.bind(this))}},{key:"clearContext",value:function(){d3.select(this.repContextContainer).selectAll("*").remove()}},{key:"handleAddress",value:function(t,i){var n=this;this.searchAddress=t;var r="https://content.googleapis.com/civicinfo/v2/representatives?address="+encodeURIComponent(t)+"&includeOffices=false&levels=country&roles=legislatorLowerBody&alt=json&key="+this.googleApiKey;fetch(r).then(function(e){return e.json()}).then(function(t){if(!t||t.error)return i({msg:n.labels.noDistrictFound},null),void n.clearContext();var r=Object.keys(t.divisions);if(1!==r.length)return i({msg:0===r.length?n.labels.noDistrictFound:n.labels.multipleDistrictsFound},null),void n.clearContext();var a=r[0],o=e.parseOcdId(a);if(!(0,_districtInAppalachia2.default)(o.state,o.cd))return i({msg:n.labels.nonAppalachianRep},null),void n.clearContext();i(null,{});var s=n.meetingStore.getMeetingsForDivision(r[0]),l={};s.forEach(function(e){l[e.id]=!0}),d3.select(n.repContextContainer).datum({official:n.meetingStore.getOfficialForDivision(a),numMeetings:s.length,avgMeetings:n.meetingStore.getAvgMeetings(),districtName:t.divisions[a].name,numPhoneMeetings:n.meetingStore.getPhoneMeetingsForDivision(a).length,pctPhoneMeetings:n.meetingStore.getPercentPhoneMeetings(),ahcaVote:n.ahcaVoteForDivision(a)}).call(n.context);var c=e.meetingsByDay(n.meetingStore,n.startDate,n.endDate,n.annotations,function(e){return l[e.id]});n.renderTimeline(c)})}},{key:"ahcaVoteForDivision",value:function(e){return this.voteStore.getVoteForDivision(e).vote_position.toLowerCase()}}],[{key:"parseOcdId",value:function(e){var t=e.split("/"),i=t[t.length-1].split(":");return{state:t[t.length-2].split(":")[1].toUpperCase(),cd:i[1]}}},{key:"meetingsByDay",value:function(e,t,i,n,r){var a=[],o=d3.timeFormat("%Y-%m-%d");return d3.timeDay.range(t,i,1).forEach(function(t,i){var s=o(t),l=e.getMeetingsForDate(s,r);(0!==l.length||n[s])&&a.push({day:i+1,date:t,meetings:l,label:n[s]?n[s].label:null})}),a.reverse()}}]),e}();


},{"./MeetingStore":1,"./VoteStore":2,"./repcontext":4,"./repsearch":5,"./timeline":6,"appalachia/lib/cd/district-in-appalachia":"appalachia/lib/cd/district-in-appalachia","core-js/fn/object/assign":"core-js/fn/object/assign","d3":"d3","es6-promise/auto":9,"isomorphic-fetch":"isomorphic-fetch"}],4:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function officialLastName(e){var t=e.name.split(" ");return t[t.length-1]}function repContext(){var e=Object.assign({},DEFAULT_LABELS),t=function(t){t.each(function(t){var n=d3.select(this);if(n.selectAll("*").remove(),t){var i=n.append("div").attr("class","representative-context");t.districtName&&i.append("span").text(e.districtName(t)),t.official&&i.append("span").text(e.officialName(t)),t.numMeetings===t.avgMeetings?i.append("span").text(e.avgMeetings(t)):t.numMeetings>t.avgMeetings?i.append("span").text(e.aboveAvgMeetings(t)):i.append("span").text(e.belowAvgMeetings(t)),0===t.numPhoneMeetings?i.append("span").text(e.noPhoneMeetings(t)):i.append("span").text(e.phoneMeetings(t)),i.append("span").text(e.ahcaVote(t))}})};return t.labels=function(n){return n?(e=Object.assign(e,n),t):e},t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=repContext,require("core-js/fn/object/assign");var _d=require("d3"),d3=_interopRequireWildcard(_d),_utils=require("./utils"),DEFAULT_LABELS={districtName:function(e){return"This address is in "+e.districtName+"."},officialName:function(e){return"The representative for this district is "+e.official.name+"."},avgMeetings:function(e){return"This representative has held "+(0,_utils.apStyleNumber)(e.numMeetings)+" "+(0,_utils.pluralize)("meeting",e.numMeetings)+", the average for Appalachian representatives."},aboveAvgMeetings:function(e){return"This representative has held "+(0,_utils.apStyleNumber)(e.numMeetings)+" "+(0,_utils.pluralize)("meeting",e.numMeetings)+", more than the average for Appalachian representatives."},belowAvgMeetings:function(e){var t=0===e.numMeetings?"no":e.numMeetings;return"This representative has held "+(0,_utils.apStyleNumber)(t)+" "+(0,_utils.pluralize)("meeting",e.numMeetings)+", below the average of "+(0,_utils.apStyleNumber)(e.avgMeetings)+" for Appalachian representatives."},noPhoneMeetings:function(e){return"This representative hasn't held any phone meetings. "+(0,_utils.pctFormat)(e.pctPhoneMeetings)+" percent of all meetings were held over the phone."},phoneMeetings:function(e){return"This representative held "+(0,_utils.apStyleNumber)(e.numPhoneMeetings)+" "+(0,_utils.pluralize)("meeting",e.numPhoneMeetings)+" over the phone.  "+(0,_utils.pctFormat)(e.pctPhoneMeetings)+" percent of all meetings were held over the phone."},ahcaVote:function(e){return officialLastName(e.official)+' voted "'+e.ahcaVote+'" on the American Healthcare Act.'}};


},{"./utils":7,"core-js/fn/object/assign":"core-js/fn/object/assign","d3":"d3"}],5:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function repSearch(){var e=function(){},t=function(){},r=null,n=function(e){if(e)return void r.text(e.msg);r.text("")},a=function(){d3.event.preventDefault();var t=d3.select(d3.event.target),a=t.select(".representative-search-form__address-input").node().value;return!!a&&(r=t.select(".representative-search-form__messages"),e(a,n),!0)},s=function(e){e.each(function(){var e=d3.select(this);e.selectAll("*").remove();var n=e.append("form").attr("class","representative-search-form").on("submit",a);n.append("input").attr("type","text").attr("class","representative-search-form__address-input").attr("placeholder","Enter your address"),n.append("button").attr("type","submit").text("Find your representative").attr("class","representative-search-form__btn representative-search-form__btn--submit"),n.append("button").attr("type","reset").text("Start over").on("click",function(){r.text(""),r.selectAll("*").remove(),t()}).attr("class","representative-search-form__btn representative-search-form__btn--reset"),n.append("div").attr("class","representative-search-form__messages")})};return s.handleAddress=function(t){return t?(e=t,s):e},s.handleReset=function(e){return e?(t=e,s):t},s}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=repSearch;var _d=require("d3"),d3=_interopRequireWildcard(_d);


},{"d3":"d3"}],6:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t}function ocdIdToDistrict(e){var t=e.split(":");return t[t.length-2].slice(0,2).toUpperCase()+"-"+t[t.length-1]}function officialDistrict(e){return ocdIdToDistrict(e.office.division.ocd_id)}function meetingsByOfficial(e){var t={};return e.forEach(function(e){t[e.official.id]||(t[e.official.id]={official:e.official,meetings:[]}),t[e.official.id].meetings.push(e)}),d3.values(t)}function getPartyLabel(e){return{Republican:"R",Democratic:"D"}[e]}function renderOfficial(e,t){e.each(function(e){var i=d3.select(this),n=getPartyLabel(e.official.party),a="timeline__meeting__official";n&&(a+=" timeline__meeting__official--"+n.toLowerCase()),i.append("span").attr("class",a).text(e.official.name),n&&i.append("span").attr("class","timeline__meeting__party timeline__meeting__party--"+n.toLowerCase()).text(" ("+n+")"),i.append("span").attr("class","timeline__meeting__district").text(" ("+officialDistrict(e.official)+")"),1===e.meetings.length&&("telephone"===e.meetings[0].meeting_type?i.append("span").attr("title","Telephone meeting").attr("class","timeline__meeting__type timeline__meeting__type--telephone").text(" ☎"):"facebook"===e.meetings[0].meeting_type?i.append("span").attr("class","timeline__meeting__type timeline__meeting__type--facebook").attr("title","Facebook meeting").text(" f"):"radio"===e.meetings[0].meeting_type&&i.append("span").attr("class","timeline__meeting__type timeline__meeting__type--radio").attr("title","Radio meeting").text(" 📻"));var l=t(e.official.office.division.ocd_id);i.append("span").attr("class","ahca-vote--"+l).attr("title","Voted "+l+" on the AHCA").text(function(){return"yes"===l?" ✔":" ❌"}),e.meetings.length>1&&i.append("span").attr("class","timeline__meeting__count").text(" x"+e.meetings.length)})}function renderDay(e,t,i){e.append("h2").attr("class","timeline__day__number").text(function(e){return e.day}),e.append("div").attr("class","timeline__day__date").text(function(e){return t(e.date)}),e.append("div").attr("class","timeline__day__label").text(function(e){return e.label}),e.selectAll(".timeline__meeting").data(function(e){return meetingsByOfficial(e.meetings)}).enter().append("div").attr("class","timeline__meeting").call(renderOfficial,i)}function meetingTimeline(){function e(e,i){e.each(function(e){var n=d3.select(this);n.selectAll("*").remove(),n.text("");var a=n.append("div").attr("class","timeline");a.selectAll(".timeline__day").data(e).enter().append("div").attr("class","timeline__day").call(renderDay,t,i),a.selectAll(".timeline__day__number").each(function(e,t){if(0===t){var i=d3.select(this),n=i.text();i.text(""),i.append("span").attr("class","timeline__day__day-label").text("Day "),i.append("span").text(n)}})})}var t=d3.timeFormat("%B %d, %Y");return e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=meetingTimeline;var _d=require("d3"),d3=_interopRequireWildcard(_d);


},{"d3":"d3"}],7:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r.default=e,r}function pluralize(e,r,t){return 1===r?e:t||e+"s"}function pctFormat(e){return d3.format(".0%")(e).replace("%","")}function apStyleNumber(e){var r={1:"one",2:"two",3:"three",4:"four",5:"five",6:"six",7:"seven",8:"eight",9:"nine"};return e>0&&e<10?r[e]:e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.pluralize=pluralize,exports.pctFormat=pctFormat,exports.apStyleNumber=apStyleNumber;var _d=require("d3"),d3=_interopRequireWildcard(_d);


},{"d3":"d3"}],8:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],9:[function(require,module,exports){
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');
'use strict';
module.exports = require('./').polyfill();

},{"./":10}],10:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   4.1.0
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  return typeof x === 'function' || typeof x === 'object' && x !== null;
}

function isFunction(x) {
  return typeof x === 'function';
}

var _isArray = undefined;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

var isArray = _isArray;

var len = 0;
var vertxNext = undefined;
var customSchedulerFn = undefined;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var r = require;
    var vertx = r('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = undefined;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && typeof require === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var _arguments = arguments;

  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;

  if (_state) {
    (function () {
      var callback = _arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    })();
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(16);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var GET_THEN_ERROR = new ErrorObject();

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    GET_THEN_ERROR.error = error;
    return GET_THEN_ERROR;
  }
}

function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        _resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      _reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      _reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    _reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return _resolve(promise, value);
    }, function (reason) {
      return _reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$) {
  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$ === GET_THEN_ERROR) {
      _reject(promise, GET_THEN_ERROR.error);
      GET_THEN_ERROR.error = null;
    } else if (then$$ === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$)) {
      handleForeignThenable(promise, maybeThenable, then$$);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function _resolve(promise, value) {
  if (promise === value) {
    _reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function _reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;

  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = undefined,
      callback = undefined,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function ErrorObject() {
  this.error = null;
}

var TRY_CATCH_ERROR = new ErrorObject();

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = undefined,
      error = undefined,
      succeeded = undefined,
      failed = undefined;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      _reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
      _resolve(promise, value);
    } else if (failed) {
      _reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      _reject(promise, value);
    }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      _resolve(promise, value);
    }, function rejectPromise(reason) {
      _reject(promise, reason);
    });
  } catch (e) {
    _reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function Enumerator(Constructor, input) {
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) {
    makePromise(this.promise);
  }

  if (isArray(input)) {
    this._input = input;
    this.length = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) {
      fulfill(this.promise, this._result);
    } else {
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) {
        fulfill(this.promise, this._result);
      }
    }
  } else {
    _reject(this.promise, validationError());
  }
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
};

Enumerator.prototype._enumerate = function () {
  var length = this.length;
  var _input = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) {
    this._eachEntry(_input[i], i);
  }
};

Enumerator.prototype._eachEntry = function (entry, i) {
  var c = this._instanceConstructor;
  var resolve$$ = c.resolve;

  if (resolve$$ === resolve) {
    var _then = getThen(entry);

    if (_then === then && entry._state !== PENDING) {
      this._settledAt(entry._state, i, entry._result);
    } else if (typeof _then !== 'function') {
      this._remaining--;
      this._result[i] = entry;
    } else if (c === Promise) {
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, _then);
      this._willSettleAt(promise, i);
    } else {
      this._willSettleAt(new c(function (resolve$$) {
        return resolve$$(entry);
      }), i);
    }
  } else {
    this._willSettleAt(resolve$$(entry), i);
  }
};

Enumerator.prototype._settledAt = function (state, i, value) {
  var promise = this.promise;

  if (promise._state === PENDING) {
    this._remaining--;

    if (state === REJECTED) {
      _reject(promise, value);
    } else {
      this._result[i] = value;
    }
  }

  if (this._remaining === 0) {
    fulfill(promise, this._result);
  }
};

Enumerator.prototype._willSettleAt = function (promise, i) {
  var enumerator = this;

  subscribe(promise, undefined, function (value) {
    return enumerator._settledAt(FULFILLED, i, value);
  }, function (reason) {
    return enumerator._settledAt(REJECTED, i, reason);
  });
};

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {function} resolver
  Useful for tooling.
  @constructor
*/
function Promise(resolver) {
  this[PROMISE_ID] = nextId();
  this._result = this._state = undefined;
  this._subscribers = [];

  if (noop !== resolver) {
    typeof resolver !== 'function' && needsResolver();
    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  }
}

Promise.all = all;
Promise.race = race;
Promise.resolve = resolve;
Promise.reject = reject;
Promise._setScheduler = setScheduler;
Promise._setAsap = setAsap;
Promise._asap = asap;

Promise.prototype = {
  constructor: Promise,

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
  */
  then: then,

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
  */
  'catch': function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};

function polyfill() {
    var local = undefined;

    if (typeof global !== 'undefined') {
        local = global;
    } else if (typeof self !== 'undefined') {
        local = self;
    } else {
        try {
            local = Function('return this')();
        } catch (e) {
            throw new Error('polyfill failed because global object is unavailable in this environment');
        }
    }

    var P = local.Promise;

    if (P) {
        var promiseToString = null;
        try {
            promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
            // silently ignored
        }

        if (promiseToString === '[object Promise]' && !P.cast) {
            return;
        }
    }

    local.Promise = Promise;
}

// Strange compat..
Promise.polyfill = polyfill;
Promise.Promise = Promise;

return Promise;

})));


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"_process":8}]},{},[3])(3)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJNZWV0aW5nU3RvcmUuanMiLCJWb3RlU3RvcmUuanMiLCJhcHAuanMiLCJyZXBjb250ZXh0LmpzIiwicmVwc2VhcmNoLmpzIiwidGltZWxpbmUuanMiLCJ1dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvZXM2LXByb21pc2UvYXV0by5qcyIsIm5vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO3lIQ0FBLFFBQVMsWUFBVyxFQUFHLEVBQU0sR0FNM0IsTUFMTSxLQUFRLEtBRVosRUFBRSxHQUFRLEdBR0wsRUFBRSw4VEFHTCx3QkFDSixRQUFBLEtBQWMsZ0JBQUEsS0FBQSxHQUNaLEtBQUssWUFDTCxLQUFLLGlCQUNMLEtBQUssa0JBQ0wsS0FBSyxzQkFDTCxLQUFLLHNCQUNMLEtBQUssMkJBQ0wsS0FBSyxhQUNMLEtBQUssdUJBQ0wsS0FBSyxpRkFHTSxHQUNYLEtBQUssVUFBWSxFQUNqQixLQUFLLHlCQUF5QixLQUFLLGtEQUluQyxNQUFPLE1BQUssMkRBR1csR0FBd0IsR0FBQSxHQUFBLEtBQWIsSUFBYSxVQUFBLE9BQUEsT0FBQSxLQUFBLFVBQUEsS0FBQSxVQUFBLEVBbUIvQyxPQWxCQSxNQUFLLFlBQ0wsS0FBSyxrQkFDTCxLQUFLLHVCQUVMLEVBQVUsUUFBUSxTQUFDLEdBQ2pCLEVBQUssb0JBQW9CLEVBQVMsT0FBTyxTQUFTLFFBQVUsRUFFNUQsRUFBUyxTQUFTLFFBQVEsU0FBQyxHQUV6QixFQUFRLFNBQVcsRUFDbkIsRUFBSyxXQUFXLE9BSWhCLEdBQ0YsS0FBSyxxQkFHQSxrREFJUCxLQUFLLFNBQVMsS0FBSyxTQUFDLEVBQUcsR0FDckIsTUFBSSxHQUFFLEtBQU8sRUFBRSxNQUNMLEVBR04s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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZnVuY3Rpb24gc2V0RGVmYXVsdChvLCBwcm9wLCBkZmx0KSB7XG4gIGlmICghKHByb3AgaW4gbykpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvW3Byb3BdID0gZGZsdDtcbiAgfVxuXG4gIHJldHVybiBvW3Byb3BdO1xufVxuXG5jbGFzcyBNZWV0aW5nU3RvcmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lZXRpbmdzID0gW107XG4gICAgdGhpcy5waG9uZU1lZXRpbmdzID0gW107XG4gICAgdGhpcy5tZWV0aW5nc0J5RGF0ZSA9IHt9O1xuICAgIHRoaXMubWVldGluZ3NCeU9mZmljaWFsID0ge307XG4gICAgdGhpcy5tZWV0aW5nc0J5RGl2aXNpb24gPSB7fTtcbiAgICB0aGlzLnBob25lTWVldGluZ3NCeURpdmlzaW9uID0ge307XG4gICAgdGhpcy5vZmZpY2lhbHMgPSBbXTtcbiAgICB0aGlzLm9mZmljaWFsc0J5RGl2aXNpb24gPSB7fTtcbiAgICB0aGlzLnBob25lT25seUJ5RGl2aXNpb24gPSB7fTtcbiAgfVxuXG4gIHNldE9mZmljaWFscyhvZmZpY2lhbHMpIHtcbiAgICB0aGlzLm9mZmljaWFscyA9IG9mZmljaWFscztcbiAgICB0aGlzLnNldE1lZXRpbmdzRnJvbU9mZmljaWFscyh0aGlzLm9mZmljaWFscyk7XG4gIH1cblxuICBnZXRPZmZpY2lhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMub2ZmaWNpYWxzO1xuICB9XG5cbiAgc2V0TWVldGluZ3NGcm9tT2ZmaWNpYWxzKG9mZmljaWFscywgc29ydCA9IHRydWUpIHtcbiAgICB0aGlzLm1lZXRpbmdzID0gW107XG4gICAgdGhpcy5tZWV0aW5nc0J5RGF0ZSA9IHt9O1xuICAgIHRoaXMub2ZmaWNpYWxzQnlEaXZpc2lvbiA9IHt9O1xuXG4gICAgb2ZmaWNpYWxzLmZvckVhY2goKG9mZmljaWFsKSA9PiB7XG4gICAgICB0aGlzLm9mZmljaWFsc0J5RGl2aXNpb25bb2ZmaWNpYWwub2ZmaWNlLmRpdmlzaW9uLm9jZF9pZF0gPSBvZmZpY2lhbDtcblxuICAgICAgb2ZmaWNpYWwubWVldGluZ3MuZm9yRWFjaCgobWVldGluZykgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgbWVldGluZy5vZmZpY2lhbCA9IG9mZmljaWFsO1xuICAgICAgICB0aGlzLmFkZE1lZXRpbmcobWVldGluZyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChzb3J0KSB7XG4gICAgICB0aGlzLnNvcnRNZWV0aW5nc0J5RGF0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc29ydE1lZXRpbmdzQnlEYXRlKCkge1xuICAgIHRoaXMubWVldGluZ3Muc29ydCgoYSwgYikgPT4ge1xuICAgICAgaWYgKGEuZGF0ZSA+IGIuZGF0ZSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmRhdGUgPCBiLmRhdGUpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkTWVldGluZyhtZWV0aW5nKSB7XG4gICAgdGhpcy5tZWV0aW5ncy5wdXNoKG1lZXRpbmcpO1xuXG4gICAgaWYgKG1lZXRpbmcubWVldGluZ190eXBlID09PSBcInRlbGVwaG9uZVwiKSB7XG4gICAgICB0aGlzLnBob25lTWVldGluZ3MucHVzaChtZWV0aW5nKTtcbiAgICB9XG5cbiAgICBzZXREZWZhdWx0KHRoaXMubWVldGluZ3NCeURhdGUsIG1lZXRpbmcuZGF0ZSwgW10pLnB1c2gobWVldGluZyk7XG5cbiAgICBzZXREZWZhdWx0KHRoaXMubWVldGluZ3NCeU9mZmljaWFsLCBtZWV0aW5nLm9mZmljaWFsLmlkLCBbXSlcbiAgICAgIC5wdXNoKG1lZXRpbmcpO1xuXG4gICAgY29uc3Qgb2NkSWQgPSBtZWV0aW5nLm9mZmljaWFsLm9mZmljZS5kaXZpc2lvbi5vY2RfaWQ7XG4gICAgc2V0RGVmYXVsdCh0aGlzLm1lZXRpbmdzQnlEaXZpc2lvbiwgb2NkSWQsIFtdKS5wdXNoKG1lZXRpbmcpO1xuXG4gICAgc2V0RGVmYXVsdCh0aGlzLnBob25lTWVldGluZ3NCeURpdmlzaW9uLCBvY2RJZCwgW10pLnB1c2gobWVldGluZyk7XG5cbiAgICBpZiAodGhpcy5waG9uZU1lZXRpbmdzQnlEaXZpc2lvbi5sZW5ndGggPT09IHRoaXMubWVldGluZ3NCeURpdmlzaW9uLmxlbmd0aCkge1xuICAgICAgdGhpcy5waG9uZU9ubHlCeURpdmlzaW9uW29jZElkXSA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5waG9uZU9ubHlCeURpdmlzaW9uW29jZElkXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0TWVldGluZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVldGluZ3M7XG4gIH1cblxuICBnZXRQaG9uZU1lZXRpbmdzKCkge1xuICAgIHJldHVybiB0aGlzLnBob25lTWVldGluZ3M7XG4gIH1cblxuICBnZXRNZWV0aW5nc0ZvckRhdGUoZGF0ZSwgZmlsdGVyKSB7XG4gICAgY29uc3QgbWVldGluZ3MgPSB0aGlzLm1lZXRpbmdzQnlEYXRlW2RhdGVdO1xuICAgIGlmICghbWVldGluZ3MpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoZmlsdGVyKSB7XG4gICAgICByZXR1cm4gbWVldGluZ3MuZmlsdGVyKGZpbHRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lZXRpbmdzO1xuICB9XG5cbiAgZ2V0TWVldGluZ3NGb3JPZmZpY2lhbChvZmZpY2lhbElkKSB7XG4gICAgcmV0dXJuIHRoaXMubWVldGluZ3NCeU9mZmljaWFsW29mZmljaWFsSWRdO1xuICB9XG5cbiAgZ2V0TWVldGluZ3NGb3JEaXZpc2lvbihvY2RJZCkge1xuICAgIGNvbnN0IG1lZXRpbmdzID0gdGhpcy5tZWV0aW5nc0J5RGl2aXNpb25bb2NkSWRdO1xuICAgIGlmICghbWVldGluZ3MpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVldGluZ3M7XG4gIH1cblxuICBnZXRQaG9uZU1lZXRpbmdzRm9yRGl2aXNpb24ob2NkSWQpIHtcbiAgICBjb25zdCBtZWV0aW5ncyA9IHRoaXMucGhvbmVNZWV0aW5nc0J5RGl2aXNpb25bb2NkSWRdO1xuICAgIGlmICghbWVldGluZ3MpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVldGluZ3M7XG4gIH1cblxuICBnZXRPZmZpY2lhbEZvckRpdmlzaW9uKG9jZElkKSB7XG4gICAgcmV0dXJuIHRoaXMub2ZmaWNpYWxzQnlEaXZpc2lvbltvY2RJZF07XG4gIH1cblxuICBnZXRBdmdNZWV0aW5ncygpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLm1lZXRpbmdzLmxlbmd0aCAvIHRoaXMub2ZmaWNpYWxzLmxlbmd0aCk7XG4gIH1cblxuICBnZXRQZXJjZW50UGhvbmVNZWV0aW5ncygpIHtcbiAgICByZXR1cm4gdGhpcy5waG9uZU1lZXRpbmdzLmxlbmd0aCAvIHRoaXMubWVldGluZ3MubGVuZ3RoO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lZXRpbmdTdG9yZTtcbiIsImNsYXNzIFZvdGVTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudm90ZXMgPSBbXTtcbiAgICB0aGlzLnZvdGVzQnlEaXZpc2lvbiA9IHt9O1xuICB9XG5cbiAgc2V0Vm90ZXModm90ZXMpIHtcbiAgICB0aGlzLnZvdGVzID0gW107XG4gICAgdGhpcy52b3Rlc0J5RGl2aXNpb24gPSB7fTtcblxuICAgIHZvdGVzLmZvckVhY2godGhpcy5hZGRWb3RlLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkVm90ZSh2b3RlKSB7XG4gICAgdGhpcy52b3Rlcy5wdXNoKHZvdGUpO1xuICAgIHRoaXMudm90ZXNCeURpdmlzaW9uW3ZvdGUub2NkX2lkXSA9IHZvdGU7XG4gIH1cblxuICBnZXRWb3RlcygpIHtcbiAgICByZXR1cm4gdGhpcy52b3RlcztcbiAgfVxuXG4gIGdldFZvdGVGb3JEaXZpc2lvbihvY2RJZCkge1xuICAgIHJldHVybiB0aGlzLnZvdGVzQnlEaXZpc2lvbltvY2RJZF07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVm90ZVN0b3JlO1xuIiwiaW1wb3J0IFwiY29yZS1qcy9mbi9vYmplY3QvYXNzaWduXCI7XG5pbXBvcnQgXCJlczYtcHJvbWlzZS9hdXRvXCI7XG5pbXBvcnQgXCJpc29tb3JwaGljLWZldGNoXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCBkaXN0cmljdEluQXBwYWxhY2hpYSBmcm9tIFwiYXBwYWxhY2hpYS9saWIvY2QvZGlzdHJpY3QtaW4tYXBwYWxhY2hpYVwiO1xuXG5pbXBvcnQgTWVldGluZ1N0b3JlIGZyb20gXCIuL01lZXRpbmdTdG9yZVwiO1xuaW1wb3J0IFZvdGVTdG9yZSBmcm9tIFwiLi9Wb3RlU3RvcmVcIjtcbmltcG9ydCBtZWV0aW5nVGltZWxpbmUgZnJvbSBcIi4vdGltZWxpbmVcIjtcbmltcG9ydCByZXBTZWFyY2ggZnJvbSBcIi4vcmVwc2VhcmNoXCI7XG5pbXBvcnQgcmVwQ29udGV4dCBmcm9tIFwiLi9yZXBjb250ZXh0XCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgY2xhc3MgQXBwIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMudGltZWxpbmVDb250YWluZXIgPSBvcHRpb25zLnRpbWVsaW5lQ29udGFpbmVyO1xuICAgIHRoaXMucmVwU2VhcmNoQ29udGFpbmVyID0gb3B0aW9ucy5yZXBTZWFyY2hDb250YWluZXI7XG4gICAgdGhpcy5yZXBDb250ZXh0Q29udGFpbmVyID0gb3B0aW9ucy5yZXBDb250ZXh0Q29udGFpbmVyO1xuICAgIHRoaXMuZ29vZ2xlQXBpS2V5ID0gb3B0aW9ucy5nb29nbGVBcGlLZXk7XG4gICAgdGhpcy5sYWJlbHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIG11bHRpcGxlRGlzdHJpY3RzRm91bmQ6IFwiRm91bmQgbW9yZSB0aGFuIG9uZSBkaXN0cmljdHMgbWF0Y2hpbmcgdGhpcyBhZGRyZXNzLlwiLFxuICAgICAgbm9EaXN0cmljdEZvdW5kOiBcIkNvdWxkIG5vdCBmaW5kIGEgZGlzdHJpY3QgbWF0Y2hpbmcgdGhpcyBhZGRyZXNzLlwiLFxuICAgICAgbm9uQXBwYWxhY2hpYW5SZXA6IFwiVGhpcyByZXByZXNlbnRhdGl2ZSdzIGRpc3RyaWN0IGRvZXMgbm90IGluY2x1ZGUgb25lIG9mIHRoZSBjb3VudGllcyBpbiBBcHBhbGFjaGlhLiAgVGhpcyBhcHAgb25seSBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCByZXByZXNlbnRhdGl2ZXMgZnJvbSBBcHBhbGFjaGlhLlwiLFxuICAgIH0sIG9wdGlvbnMubGFiZWxzKTtcbiAgICB0aGlzLm1lZXRpbmdTdG9yZSA9IG5ldyBNZWV0aW5nU3RvcmUoKTtcbiAgICB0aGlzLnZvdGVTdG9yZSA9IG5ldyBWb3RlU3RvcmUoKTtcbiAgICB0aGlzLnN0YXJ0RGF0ZSA9IG9wdGlvbnMuc3RhcnREYXRlIHx8IG5ldyBEYXRlKDIwMTcsIDAsIDIwKTtcbiAgICB0aGlzLmVuZERhdGUgPSBvcHRpb25zLmVuZERhdGUgfHwgbmV3IERhdGUoKTtcbiAgICB0aGlzLmFubm90YXRpb25zID0gb3B0aW9ucy5hbm5vdGF0aW9ucyB8fCB7XG4gICAgICAvLyBTb3VyY2U6IGh0dHBzOi8vd3d3Lm1ham9yaXR5bGVhZGVyLmdvdi93cC1jb250ZW50L3VwbG9hZHMvMjAxNi8xMS8yMDE3LU1PTlRITFktQ0FMRU5EQVIucGRmXG4gICAgICBcIjIwMTctMDEtMjBcIjoge1xuICAgICAgICBsYWJlbDogXCJJbmF1Z3VyYXRpb24gZGF5XCIsXG4gICAgICB9LFxuICAgICAgXCIyMDE3LTAyLTIwXCI6IHtcbiAgICAgICAgbGFiZWw6IFwiRGlzdHJpY3Qgd29yayBwZXJpb2QgYmVnaW5zXCIsXG4gICAgICB9LFxuICAgICAgXCIyMDE3LTAyLTI0XCI6IHtcbiAgICAgICAgbGFiZWw6IFwiRGlzdHJpY3Qgd29yayBwZXJpb2QgZW5kc1wiLFxuICAgICAgfSxcbiAgICAgIFwiMjAxNy0wNC0xMFwiOiB7XG4gICAgICAgIGxhYmVsOiBcIkRpc3RyaWN0IHdvcmsgcGVyaW9kIGJlZ2luc1wiLFxuICAgICAgfSxcbiAgICAgIFwiMjAxNy0wNC0yMVwiOiB7XG4gICAgICAgIGxhYmVsOiBcIkRpc3RyaWN0IHdvcmsgcGVyaW9kIGVuZHNcIixcbiAgICAgIH0sXG4gICAgICBcIjIwMTctMDUtMzBcIjoge1xuICAgICAgICBsYWJlbDogXCJEaXN0cmljdCB3b3JrIHBlcmlvZCBiZWdpbnNcIixcbiAgICAgIH0sXG4gICAgICBcIjIwMTctMDYtMDJcIjoge1xuICAgICAgICBsYWJlbDogXCJEaXN0cmljdCB3b3JrIHBlcmlvZCBlbmRzXCIsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICAvLyBFeHBsaWNpdGVseSBiaW5kIHRoaXMgbWV0aG9kIHRvIHRoZSBpbnN0YW5jZSBzbyB0aGF0IHdlIGNhbiBhY2Nlc3NcbiAgICAvLyBgdGhpc2Agd2hlbiB0aGUgbWV0aG9kIGlzIHVzZWQgYXMgYSBjYWxsYmFja1xuICAgIHRoaXMuaGFuZGxlQWRkcmVzcyA9IHRoaXMuaGFuZGxlQWRkcmVzcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlUmVzZXQgPSB0aGlzLmhhbmRsZVJlc2V0LmJpbmQodGhpcyk7XG5cbiAgICAvLyBDb25zdHJ1Y3Qgc29tZSBkMyBjb21wb25lbnRzXG4gICAgdGhpcy50aW1lbGluZSA9IG1lZXRpbmdUaW1lbGluZSgpO1xuICAgIHRoaXMuc2VhcmNoID0gcmVwU2VhcmNoKClcbiAgICAgIC5oYW5kbGVBZGRyZXNzKHRoaXMuaGFuZGxlQWRkcmVzcylcbiAgICAgIC5oYW5kbGVSZXNldCh0aGlzLmhhbmRsZVJlc2V0KTtcbiAgICB0aGlzLmNvbnRleHQgPSByZXBDb250ZXh0KClcbiAgICAgIC5sYWJlbHModGhpcy5sYWJlbHMpO1xuXG4gICAgLy8gVGhlc2UgYXJlIHRoZSBzdGF0ZSB2YXJpYWJsZXNcbiAgICB0aGlzLmFsbERheXMgPSBbXTtcbiAgICB0aGlzLnNlYXJjaEFkZHJlc3MgPSBudWxsO1xuXG4gICAgY29uc3QgbWVldGluZ3NQcm9taXNlID0gZmV0Y2gob3B0aW9ucy5vZmZpY2lhbE1lZXRpbmdzSnNvblVybCkudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YS5vYmplY3RzKTtcblxuICAgIGNvbnN0IHZvdGVzUHJvbWlzZSA9IGZldGNoKG9wdGlvbnMuYWhjYVZvdGVzSnNvblVybCkudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YS52b3Rlcyk7XG5cbiAgICBQcm9taXNlLmFsbChbbWVldGluZ3NQcm9taXNlLCB2b3Rlc1Byb21pc2VdKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBjb25zdCBtZWV0aW5ncyA9IGRhdGFbMF07XG4gICAgICBjb25zdCB2b3RlcyA9IGRhdGFbMV07XG5cbiAgICAgIHRoaXMubWVldGluZ1N0b3JlLnNldE9mZmljaWFscyhtZWV0aW5ncyk7XG4gICAgICB0aGlzLnZvdGVTdG9yZS5zZXRWb3Rlcyh2b3Rlcyk7XG5cbiAgICAgIHRoaXMuYWxsRGF5cyA9IEFwcC5tZWV0aW5nc0J5RGF5KFxuICAgICAgICB0aGlzLm1lZXRpbmdTdG9yZSxcbiAgICAgICAgdGhpcy5zdGFydERhdGUsXG4gICAgICAgIHRoaXMuZW5kRGF0ZSxcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9ucyxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMucmVuZGVyVGltZWxpbmUodGhpcy5hbGxEYXlzKTtcblxuICAgICAgZDMuc2VsZWN0KHRoaXMucmVwU2VhcmNoQ29udGFpbmVyKVxuICAgICAgICAuY2FsbCh0aGlzLnNlYXJjaCk7XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVSZXNldCgpIHtcbiAgICBpZiAodGhpcy5zZWFyY2hBZGRyZXNzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnJlbmRlclRpbWVsaW5lKHRoaXMuYWxsRGF5cyk7XG4gICAgICBkMy5zZWxlY3QodGhpcy5yZXBDb250ZXh0Q29udGFpbmVyKVxuICAgICAgICAuZGF0dW0obnVsbClcbiAgICAgICAgLmNhbGwodGhpcy5jb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBzdGF0ZSBhbmQgZGlzdHJpY3QgbnVtYmVyIGZyb20gYW4gT0NEIElELlxuICAgKi9cbiAgc3RhdGljIHBhcnNlT2NkSWQob2NkSWQpIHtcbiAgICBjb25zdCBiaXRzID0gb2NkSWQuc3BsaXQoXCIvXCIpO1xuICAgIGNvbnN0IGNkQml0cyA9IGJpdHNbYml0cy5sZW5ndGggLSAxXS5zcGxpdChcIjpcIik7XG4gICAgY29uc3Qgc3RhdGVCaXRzID0gYml0c1tiaXRzLmxlbmd0aCAtIDJdLnNwbGl0KFwiOlwiKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0ZTogc3RhdGVCaXRzWzFdLnRvVXBwZXJDYXNlKCksXG4gICAgICBjZDogY2RCaXRzWzFdLFxuICAgIH07XG4gIH1cblxuICByZW5kZXJUaW1lbGluZShkYXlzKSB7XG4gICAgZDMuc2VsZWN0KHRoaXMudGltZWxpbmVDb250YWluZXIpXG4gICAgICAuZGF0dW0oZGF5cylcbiAgICAgIC5jYWxsKHRoaXMudGltZWxpbmUsIHRoaXMuYWhjYVZvdGVGb3JEaXZpc2lvbi5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGNsZWFyQ29udGV4dCgpIHtcbiAgICBkMy5zZWxlY3QodGhpcy5yZXBDb250ZXh0Q29udGFpbmVyKVxuICAgICAgLnNlbGVjdEFsbChcIipcIilcbiAgICAgIC5yZW1vdmUoKTtcbiAgfVxuXG4gIGhhbmRsZUFkZHJlc3MoYWRkcmVzcywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnNlYXJjaEFkZHJlc3MgPSBhZGRyZXNzO1xuXG4gICAgLy8gVXNlIHRoZSBHb29nbGUgQ2l2aWMgSW5mb3JtYXRpb24gQVBJIHRvIGxvb2t1cCB0aGUgVS5TLiBSZXByZXNlbnRhdGl2ZVxuICAgIC8vIGZvciBhbiBhZGRyZXNzLlxuICAgIC8vXG4gICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2NpdmljLWluZm9ybWF0aW9uL2RvY3MvdjIvcmVwcmVzZW50YXRpdmVzL3JlcHJlc2VudGF0aXZlSW5mb0J5QWRkcmVzc1xuICAgIC8vIGZvciBBUEkgZG9jcy5cbiAgICAvLyBBIGZldyBxdWljayBub3RlczpcbiAgICAvL1xuICAgIC8vIFdlIGp1c3QgbmVlZCB0byBsb29rIHVwIHJlcHMgYnkgdGhlaXIgZGlzdHJpY3QsIHNvIHdlIGp1c3QgbmVlZCB0aGVcbiAgICAvLyBwb2xpdGljYWwgZGl2aXNpb24gYW5kIG5vdCBkYXRhIGFib3V0IG9mZmljZXMuICBXZSBleGNsdWRlIG9mZmljZSBkYXRhXG4gICAgLy8gYnkgc3BlY2lmeWluZyBgaW5jbHVkZU9mZmljZXM9ZmFsc2VgXG4gICAgLy9cbiAgICAvLyBgbGV2ZWxzPWNvdW50cnlgIGFuZCBgcm9sZXM9bGVnaXNsYXRvckxvd2VyQm9keWAgc3BlY2lmaWVzIHRoYXQgd2Ugb25seVxuICAgIC8vIGNhcmUgYWJvdXQgdGhlIGhvdXNlLlxuICAgIGNvbnN0IHVybCA9IGBodHRwczovL2NvbnRlbnQuZ29vZ2xlYXBpcy5jb20vY2l2aWNpbmZvL3YyL3JlcHJlc2VudGF0aXZlcz9hZGRyZXNzPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGFkZHJlc3MpfSZpbmNsdWRlT2ZmaWNlcz1mYWxzZSZsZXZlbHM9Y291bnRyeSZyb2xlcz1sZWdpc2xhdG9yTG93ZXJCb2R5JmFsdD1qc29uJmtleT0ke3RoaXMuZ29vZ2xlQXBpS2V5fWA7XG5cbiAgICBmZXRjaCh1cmwpLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGlmICghZGF0YSB8fCBkYXRhLmVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICBtc2c6IHRoaXMubGFiZWxzLm5vRGlzdHJpY3RGb3VuZCxcbiAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgIHRoaXMuY2xlYXJDb250ZXh0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRGl2aXNpb25zIGlzIGFuIG9iamVjdCBrZXllZCBieSBPQ0QgSUQuIFdlIG5lZWQgYSBsaXN0IG9mIHRoZXNlIElEcy5cbiAgICAgIGNvbnN0IGRpdmlzaW9ucyA9IE9iamVjdC5rZXlzKGRhdGEuZGl2aXNpb25zKTtcblxuICAgICAgLy8gVGhlcmUgc2hvdWxkIGJlIG9uZSBhbmQgb25seSBvbmUgY29uZ3Jlc3Npb25hbCBkaXN0cmljdCBmb3IgYW4gYWRkcmVzc1xuICAgICAgaWYgKGRpdmlzaW9ucy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgIG1zZzogKFxuICAgICAgICAgICAgZGl2aXNpb25zLmxlbmd0aCA9PT0gMCA/XG4gICAgICAgICAgICB0aGlzLmxhYmVscy5ub0Rpc3RyaWN0Rm91bmQgOlxuICAgICAgICAgICAgdGhpcy5sYWJlbHMubXVsdGlwbGVEaXN0cmljdHNGb3VuZFxuICAgICAgICAgICksXG4gICAgICAgIH0sIG51bGwpO1xuICAgICAgICB0aGlzLmNsZWFyQ29udGV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFN1Y2Nlc3NcblxuICAgICAgLy8gQ2hlY2sgYW5kIG1ha2Ugc3VyZSB0aGF0IHRoZSBkaXN0cmljdCBpcyBpbiBBcHBhbGFjaGlhXG4gICAgICBjb25zdCBvY2RJZCA9IGRpdmlzaW9uc1swXTtcbiAgICAgIGNvbnN0IHN0YXRlRGlzdHJpY3QgPSBBcHAucGFyc2VPY2RJZChvY2RJZCk7XG5cbiAgICAgIGlmICghZGlzdHJpY3RJbkFwcGFsYWNoaWEoc3RhdGVEaXN0cmljdC5zdGF0ZSwgc3RhdGVEaXN0cmljdC5jZCkpIHtcbiAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgIG1zZzogdGhpcy5sYWJlbHMubm9uQXBwYWxhY2hpYW5SZXAsXG4gICAgICAgIH0sIG51bGwpO1xuICAgICAgICB0aGlzLmNsZWFyQ29udGV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRlbGwgdGhlIGZvcm1cbiAgICAgIGNhbGxiYWNrKG51bGwsIHt9KTtcblxuICAgICAgY29uc3QgbWVldGluZ3NGb3JEaXZpc2lvbiA9IHRoaXMubWVldGluZ1N0b3JlLmdldE1lZXRpbmdzRm9yRGl2aXNpb24oZGl2aXNpb25zWzBdKTtcbiAgICAgIGNvbnN0IG1lZXRpbmdJZHMgPSB7fTtcbiAgICAgIG1lZXRpbmdzRm9yRGl2aXNpb24uZm9yRWFjaCgobWVldGluZykgPT4ge1xuICAgICAgICBtZWV0aW5nSWRzW21lZXRpbmcuaWRdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBkMy5zZWxlY3QodGhpcy5yZXBDb250ZXh0Q29udGFpbmVyKVxuICAgICAgICAuZGF0dW0oe1xuICAgICAgICAgIG9mZmljaWFsOiB0aGlzLm1lZXRpbmdTdG9yZS5nZXRPZmZpY2lhbEZvckRpdmlzaW9uKG9jZElkKSxcbiAgICAgICAgICBudW1NZWV0aW5nczogbWVldGluZ3NGb3JEaXZpc2lvbi5sZW5ndGgsXG4gICAgICAgICAgYXZnTWVldGluZ3M6IHRoaXMubWVldGluZ1N0b3JlLmdldEF2Z01lZXRpbmdzKCksXG4gICAgICAgICAgZGlzdHJpY3ROYW1lOiBkYXRhLmRpdmlzaW9uc1tvY2RJZF0ubmFtZSxcbiAgICAgICAgICBudW1QaG9uZU1lZXRpbmdzOiB0aGlzLm1lZXRpbmdTdG9yZS5nZXRQaG9uZU1lZXRpbmdzRm9yRGl2aXNpb24ob2NkSWQpLmxlbmd0aCxcbiAgICAgICAgICBwY3RQaG9uZU1lZXRpbmdzOiB0aGlzLm1lZXRpbmdTdG9yZS5nZXRQZXJjZW50UGhvbmVNZWV0aW5ncygpLFxuICAgICAgICAgIGFoY2FWb3RlOiB0aGlzLmFoY2FWb3RlRm9yRGl2aXNpb24ob2NkSWQpLFxuICAgICAgICB9KVxuICAgICAgICAuY2FsbCh0aGlzLmNvbnRleHQpO1xuXG4gICAgICBjb25zdCBkYXlzID0gQXBwLm1lZXRpbmdzQnlEYXkoXG4gICAgICAgIHRoaXMubWVldGluZ1N0b3JlLFxuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSxcbiAgICAgICAgdGhpcy5lbmREYXRlLFxuICAgICAgICB0aGlzLmFubm90YXRpb25zLFxuICAgICAgICBtZWV0aW5nID0+IG1lZXRpbmdJZHNbbWVldGluZy5pZF0sXG4gICAgICApO1xuICAgICAgdGhpcy5yZW5kZXJUaW1lbGluZShkYXlzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBtZWV0aW5nc0J5RGF5KG1lZXRpbmdTdG9yZSwgc3RhcnREYXRlLCBlbmREYXRlLCBhbm5vdGF0aW9ucywgZmlsdGVyKSB7XG4gICAgY29uc3QgZGF5cyA9IFtdO1xuICAgIGNvbnN0IGZvcm1hdCA9IGQzLnRpbWVGb3JtYXQoXCIlWS0lbS0lZFwiKTtcblxuICAgIGQzLnRpbWVEYXkucmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlLCAxKVxuICAgICAgLmZvckVhY2goKGRhdGUsIGkpID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZVN0ciA9IGZvcm1hdChkYXRlKTtcbiAgICAgICAgY29uc3QgbWVldGluZ3MgPSBtZWV0aW5nU3RvcmUuZ2V0TWVldGluZ3NGb3JEYXRlKGRhdGVTdHIsIGZpbHRlcik7XG5cbiAgICAgICAgaWYgKG1lZXRpbmdzLmxlbmd0aCA9PT0gMCAmJiAhYW5ub3RhdGlvbnNbZGF0ZVN0cl0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkYXlzLnB1c2goe1xuICAgICAgICAgIGRheTogaSArIDEsXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9iamVjdC1zaG9ydGhhbmRcbiAgICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvYmplY3Qtc2hvcnRoYW5kXG4gICAgICAgICAgbWVldGluZ3M6IG1lZXRpbmdzLFxuICAgICAgICAgIGxhYmVsOiBhbm5vdGF0aW9uc1tkYXRlU3RyXSA/IGFubm90YXRpb25zW2RhdGVTdHJdLmxhYmVsIDogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBkYXlzLnJldmVyc2UoKTtcbiAgfVxuXG4gIGFoY2FWb3RlRm9yRGl2aXNpb24ob2NkSWQpIHtcbiAgICByZXR1cm4gdGhpcy52b3RlU3RvcmUuZ2V0Vm90ZUZvckRpdmlzaW9uKG9jZElkKS52b3RlX3Bvc2l0aW9uLnRvTG93ZXJDYXNlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBcImNvcmUtanMvZm4vb2JqZWN0L2Fzc2lnblwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmltcG9ydCB7IGFwU3R5bGVOdW1iZXIsIHBjdEZvcm1hdCwgcGx1cmFsaXplIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZnVuY3Rpb24gb2ZmaWNpYWxMYXN0TmFtZShvZmZpY2lhbCkge1xuICBjb25zdCBuYW1lUGFydHMgPSBvZmZpY2lhbC5uYW1lLnNwbGl0KFwiIFwiKTtcbiAgcmV0dXJuIG5hbWVQYXJ0c1tuYW1lUGFydHMubGVuZ3RoIC0gMV07XG59XG5cbmNvbnN0IERFRkFVTFRfTEFCRUxTID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb2JqZWN0LXNob3J0aGFuZFxuICBkaXN0cmljdE5hbWU6IGN0eCA9PiBgVGhpcyBhZGRyZXNzIGlzIGluICR7Y3R4LmRpc3RyaWN0TmFtZX0uYCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9iamVjdC1zaG9ydGhhbmRcbiAgb2ZmaWNpYWxOYW1lOiBjdHggPT4gYFRoZSByZXByZXNlbnRhdGl2ZSBmb3IgdGhpcyBkaXN0cmljdCBpcyAke2N0eC5vZmZpY2lhbC5uYW1lfS5gLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb2JqZWN0LXNob3J0aGFuZFxuICBhdmdNZWV0aW5nczogY3R4ID0+IGBUaGlzIHJlcHJlc2VudGF0aXZlIGhhcyBoZWxkICR7YXBTdHlsZU51bWJlcihjdHgubnVtTWVldGluZ3MpfSAke3BsdXJhbGl6ZShcIm1lZXRpbmdcIiwgY3R4Lm51bU1lZXRpbmdzKX0sIHRoZSBhdmVyYWdlIGZvciBBcHBhbGFjaGlhbiByZXByZXNlbnRhdGl2ZXMuYCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9iamVjdC1zaG9ydGhhbmRcbiAgYWJvdmVBdmdNZWV0aW5nczogY3R4ID0+IGBUaGlzIHJlcHJlc2VudGF0aXZlIGhhcyBoZWxkICR7YXBTdHlsZU51bWJlcihjdHgubnVtTWVldGluZ3MpfSAke3BsdXJhbGl6ZShcIm1lZXRpbmdcIiwgY3R4Lm51bU1lZXRpbmdzKX0sIG1vcmUgdGhhbiB0aGUgYXZlcmFnZSBmb3IgQXBwYWxhY2hpYW4gcmVwcmVzZW50YXRpdmVzLmAsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvYmplY3Qtc2hvcnRoYW5kLGZ1bmMtbmFtZXNcbiAgYmVsb3dBdmdNZWV0aW5nczogZnVuY3Rpb24gKGN0eCkge1xuICAgIGNvbnN0IG51bU1lZXRpbmdzV29yZCA9IGN0eC5udW1NZWV0aW5ncyA9PT0gMCA/IFwibm9cIiA6IGN0eC5udW1NZWV0aW5ncztcbiAgICByZXR1cm4gYFRoaXMgcmVwcmVzZW50YXRpdmUgaGFzIGhlbGQgJHthcFN0eWxlTnVtYmVyKG51bU1lZXRpbmdzV29yZCl9ICR7cGx1cmFsaXplKFwibWVldGluZ1wiLCBjdHgubnVtTWVldGluZ3MpfSwgYmVsb3cgdGhlIGF2ZXJhZ2Ugb2YgJHthcFN0eWxlTnVtYmVyKGN0eC5hdmdNZWV0aW5ncyl9IGZvciBBcHBhbGFjaGlhbiByZXByZXNlbnRhdGl2ZXMuYDtcbiAgfSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9iamVjdC1zaG9ydGhhbmRcbiAgbm9QaG9uZU1lZXRpbmdzOiBjdHggPT4gYFRoaXMgcmVwcmVzZW50YXRpdmUgaGFzbid0IGhlbGQgYW55IHBob25lIG1lZXRpbmdzLiAke3BjdEZvcm1hdChjdHgucGN0UGhvbmVNZWV0aW5ncyl9IHBlcmNlbnQgb2YgYWxsIG1lZXRpbmdzIHdlcmUgaGVsZCBvdmVyIHRoZSBwaG9uZS5gLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb2JqZWN0LXNob3J0aGFuZFxuICBwaG9uZU1lZXRpbmdzOiBjdHggPT4gYFRoaXMgcmVwcmVzZW50YXRpdmUgaGVsZCAke2FwU3R5bGVOdW1iZXIoY3R4Lm51bVBob25lTWVldGluZ3MpfSAke3BsdXJhbGl6ZShcIm1lZXRpbmdcIiwgY3R4Lm51bVBob25lTWVldGluZ3MpfSBvdmVyIHRoZSBwaG9uZS4gICR7cGN0Rm9ybWF0KGN0eC5wY3RQaG9uZU1lZXRpbmdzKX0gcGVyY2VudCBvZiBhbGwgbWVldGluZ3Mgd2VyZSBoZWxkIG92ZXIgdGhlIHBob25lLmAsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBvYmplY3Qtc2hvcnRoYW5kXG4gIGFoY2FWb3RlOiBjdHggPT4gYCR7b2ZmaWNpYWxMYXN0TmFtZShjdHgub2ZmaWNpYWwpfSB2b3RlZCBcIiR7Y3R4LmFoY2FWb3RlfVwiIG9uIHRoZSBBbWVyaWNhbiBIZWFsdGhjYXJlIEFjdC5gLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVwQ29udGV4dCgpIHtcbiAgbGV0IGxhYmVscyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfTEFCRUxTKTtcblxuICBjb25zdCBjb250ZXh0ID0gKHNlbGVjdGlvbikgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGNvbnN0IHNlbCA9IGQzLnNlbGVjdCh0aGlzKTtcblxuICAgICAgc2VsLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVsID0gc2VsLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwicmVwcmVzZW50YXRpdmUtY29udGV4dFwiKTtcblxuICAgICAgaWYgKGRhdGEuZGlzdHJpY3ROYW1lKSB7XG4gICAgICAgIGVsLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAudGV4dChsYWJlbHMuZGlzdHJpY3ROYW1lKGRhdGEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEub2ZmaWNpYWwpIHtcbiAgICAgICAgZWwuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgIC50ZXh0KGxhYmVscy5vZmZpY2lhbE5hbWUoZGF0YSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5udW1NZWV0aW5ncyA9PT0gZGF0YS5hdmdNZWV0aW5ncykge1xuICAgICAgICBlbC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgLnRleHQobGFiZWxzLmF2Z01lZXRpbmdzKGRhdGEpKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGRhdGEubnVtTWVldGluZ3MgPiBkYXRhLmF2Z01lZXRpbmdzKSB7XG4gICAgICAgIGVsLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAudGV4dChsYWJlbHMuYWJvdmVBdmdNZWV0aW5ncyhkYXRhKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWwuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgIC50ZXh0KGxhYmVscy5iZWxvd0F2Z01lZXRpbmdzKGRhdGEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEubnVtUGhvbmVNZWV0aW5ncyA9PT0gMCkge1xuICAgICAgICBlbC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgLnRleHQobGFiZWxzLm5vUGhvbmVNZWV0aW5ncyhkYXRhKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWwuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgIC50ZXh0KGxhYmVscy5waG9uZU1lZXRpbmdzKGRhdGEpKTtcbiAgICAgIH1cblxuICAgICAgZWwuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAudGV4dChsYWJlbHMuYWhjYVZvdGUoZGF0YSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnRleHQubGFiZWxzID0gKHZhbCkgPT4ge1xuICAgIGlmICghdmFsKSB7XG4gICAgICByZXR1cm4gbGFiZWxzO1xuICAgIH1cblxuICAgIGxhYmVscyA9IE9iamVjdC5hc3NpZ24obGFiZWxzLCB2YWwpO1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBjb250ZXh0O1xufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcFNlYXJjaCgpIHtcbiAgbGV0IGhhbmRsZUFkZHJlc3MgPSAoKSA9PiB7fTtcbiAgbGV0IGhhbmRsZVJlc2V0ID0gKCkgPT4ge307XG4gIGxldCBtZXNzYWdlcyA9IG51bGw7XG5cbiAgY29uc3QgcmVjZWl2ZVJlc3BvbnNlID0gKGVycikgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG1lc3NhZ2VzLnRleHQoZXJyLm1zZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWVzc2FnZXMudGV4dChcIlwiKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoKSA9PiB7XG4gICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IGZvcm0gPSBkMy5zZWxlY3QoZDMuZXZlbnQudGFyZ2V0KTtcbiAgICBjb25zdCBhZGRyZXNzID0gZm9ybS5zZWxlY3QoXCIucmVwcmVzZW50YXRpdmUtc2VhcmNoLWZvcm1fX2FkZHJlc3MtaW5wdXRcIikubm9kZSgpLnZhbHVlO1xuXG4gICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAvLyBEb24ndCBhbGxvdyBhbiBlbXB0eSBhZGRyZXNzXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbWVzc2FnZXMgPSBmb3JtLnNlbGVjdChcIi5yZXByZXNlbnRhdGl2ZS1zZWFyY2gtZm9ybV9fbWVzc2FnZXNcIik7XG4gICAgaGFuZGxlQWRkcmVzcyhhZGRyZXNzLCByZWNlaXZlUmVzcG9uc2UpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29uc3Qgc2VhcmNoID0gKHNlbGVjdGlvbikgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3Qgc2VsID0gZDMuc2VsZWN0KHRoaXMpO1xuXG4gICAgICBzZWwuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgICAgY29uc3QgZm9ybSA9IHNlbC5hcHBlbmQoXCJmb3JtXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInJlcHJlc2VudGF0aXZlLXNlYXJjaC1mb3JtXCIpXG4gICAgICAgICAgLm9uKFwic3VibWl0XCIsIGhhbmRsZVN1Ym1pdCk7XG5cbiAgICAgIGZvcm0uYXBwZW5kKFwiaW5wdXRcIilcbiAgICAgICAgICAuYXR0cihcInR5cGVcIiwgXCJ0ZXh0XCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInJlcHJlc2VudGF0aXZlLXNlYXJjaC1mb3JtX19hZGRyZXNzLWlucHV0XCIpXG4gICAgICAgICAgLmF0dHIoXCJwbGFjZWhvbGRlclwiLCBcIkVudGVyIHlvdXIgYWRkcmVzc1wiKTtcblxuICAgICAgZm9ybS5hcHBlbmQoXCJidXR0b25cIilcbiAgICAgICAgICAuYXR0cihcInR5cGVcIiwgXCJzdWJtaXRcIilcbiAgICAgICAgICAudGV4dChcIkZpbmQgeW91ciByZXByZXNlbnRhdGl2ZVwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJyZXByZXNlbnRhdGl2ZS1zZWFyY2gtZm9ybV9fYnRuIHJlcHJlc2VudGF0aXZlLXNlYXJjaC1mb3JtX19idG4tLXN1Ym1pdFwiKTtcblxuICAgICAgZm9ybS5hcHBlbmQoXCJidXR0b25cIilcbiAgICAgICAgICAuYXR0cihcInR5cGVcIiwgXCJyZXNldFwiKVxuICAgICAgICAgIC50ZXh0KFwiU3RhcnQgb3ZlclwiKVxuICAgICAgICAgIC5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnRleHQoXCJcIik7XG4gICAgICAgICAgICBtZXNzYWdlcy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaGFuZGxlUmVzZXQoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJyZXByZXNlbnRhdGl2ZS1zZWFyY2gtZm9ybV9fYnRuIHJlcHJlc2VudGF0aXZlLXNlYXJjaC1mb3JtX19idG4tLXJlc2V0XCIpO1xuXG4gICAgICBmb3JtLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJyZXByZXNlbnRhdGl2ZS1zZWFyY2gtZm9ybV9fbWVzc2FnZXNcIik7XG4gICAgfSk7XG4gIH07XG5cbiAgc2VhcmNoLmhhbmRsZUFkZHJlc3MgPSAodmFsKSA9PiB7XG4gICAgaWYgKCF2YWwpIHtcbiAgICAgIHJldHVybiBoYW5kbGVBZGRyZXNzO1xuICAgIH1cblxuICAgIGhhbmRsZUFkZHJlc3MgPSB2YWw7XG4gICAgcmV0dXJuIHNlYXJjaDtcbiAgfTtcblxuICBzZWFyY2guaGFuZGxlUmVzZXQgPSAodmFsKSA9PiB7XG4gICAgaWYgKCF2YWwpIHtcbiAgICAgIHJldHVybiBoYW5kbGVSZXNldDtcbiAgICB9XG5cbiAgICBoYW5kbGVSZXNldCA9IHZhbDtcbiAgICByZXR1cm4gc2VhcmNoO1xuICB9O1xuXG4gIHJldHVybiBzZWFyY2g7XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcblxuZnVuY3Rpb24gb2NkSWRUb0Rpc3RyaWN0KG9jZElkKSB7XG4gIGNvbnN0IGJpdHMgPSBvY2RJZC5zcGxpdChcIjpcIik7XG4gIGNvbnN0IHN0YXRlID0gYml0c1tiaXRzLmxlbmd0aCAtIDJdLnNsaWNlKDAsIDIpLnRvVXBwZXJDYXNlKCk7XG4gIGNvbnN0IGRpc3RyaWN0ID0gYml0c1tiaXRzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYCR7c3RhdGV9LSR7ZGlzdHJpY3R9YDtcbn1cblxuZnVuY3Rpb24gb2ZmaWNpYWxEaXN0cmljdChvZmZpY2lhbCkge1xuICByZXR1cm4gb2NkSWRUb0Rpc3RyaWN0KG9mZmljaWFsLm9mZmljZS5kaXZpc2lvbi5vY2RfaWQpO1xufVxuXG5mdW5jdGlvbiBtZWV0aW5nc0J5T2ZmaWNpYWwobWVldGluZ3MpIHtcbiAgY29uc3QgYnlPZmZpY2lhbCA9IHt9O1xuICBtZWV0aW5ncy5mb3JFYWNoKChtZWV0aW5nKSA9PiB7XG4gICAgaWYgKCFieU9mZmljaWFsW21lZXRpbmcub2ZmaWNpYWwuaWRdKSB7XG4gICAgICBieU9mZmljaWFsW21lZXRpbmcub2ZmaWNpYWwuaWRdID0ge1xuICAgICAgICBvZmZpY2lhbDogbWVldGluZy5vZmZpY2lhbCxcbiAgICAgICAgbWVldGluZ3M6IFtdLFxuICAgICAgfTtcbiAgICB9XG4gICAgYnlPZmZpY2lhbFttZWV0aW5nLm9mZmljaWFsLmlkXS5tZWV0aW5ncy5wdXNoKG1lZXRpbmcpO1xuICB9KTtcblxuICByZXR1cm4gZDMudmFsdWVzKGJ5T2ZmaWNpYWwpO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJ0eUxhYmVsKHBhcnR5KSB7XG4gIGNvbnN0IHBhcnR5VG9MYWJlbCA9IHtcbiAgICBSZXB1YmxpY2FuOiBcIlJcIixcbiAgICBEZW1vY3JhdGljOiBcIkRcIixcbiAgfTtcblxuICByZXR1cm4gcGFydHlUb0xhYmVsW3BhcnR5XTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyT2ZmaWNpYWwoc2VsLCBnZXRBaGNhVm90ZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICBzZWwuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgIGNvbnN0IGVsID0gZDMuc2VsZWN0KHRoaXMpO1xuXG4gICAgY29uc3QgcGFydHlMYWJlbCA9IGdldFBhcnR5TGFiZWwoZC5vZmZpY2lhbC5wYXJ0eSk7XG4gICAgbGV0IG9mZmljaWFsQ2xhc3MgPSBcInRpbWVsaW5lX19tZWV0aW5nX19vZmZpY2lhbFwiO1xuICAgIGlmIChwYXJ0eUxhYmVsKSB7XG4gICAgICBvZmZpY2lhbENsYXNzICs9IGAgdGltZWxpbmVfX21lZXRpbmdfX29mZmljaWFsLS0ke3BhcnR5TGFiZWwudG9Mb3dlckNhc2UoKX1gO1xuICAgIH1cblxuICAgIGVsLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBvZmZpY2lhbENsYXNzKVxuICAgICAgICAudGV4dChkLm9mZmljaWFsLm5hbWUpO1xuXG4gICAgaWYgKHBhcnR5TGFiZWwpIHtcbiAgICAgIGVsLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGB0aW1lbGluZV9fbWVldGluZ19fcGFydHkgdGltZWxpbmVfX21lZXRpbmdfX3BhcnR5LS0ke3BhcnR5TGFiZWwudG9Mb3dlckNhc2UoKX1gKVxuICAgICAgICAgIC50ZXh0KGAgKCR7cGFydHlMYWJlbH0pYCk7XG4gICAgfVxuXG4gICAgZWwuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidGltZWxpbmVfX21lZXRpbmdfX2Rpc3RyaWN0XCIpXG4gICAgICAgIC50ZXh0KGAgKCR7b2ZmaWNpYWxEaXN0cmljdChkLm9mZmljaWFsKX0pYCk7XG5cbiAgICBpZiAoZC5tZWV0aW5ncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChkLm1lZXRpbmdzWzBdLm1lZXRpbmdfdHlwZSA9PT0gXCJ0ZWxlcGhvbmVcIikge1xuICAgICAgICBlbC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgICAuYXR0cihcInRpdGxlXCIsIFwiVGVsZXBob25lIG1lZXRpbmdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0aW1lbGluZV9fbWVldGluZ19fdHlwZSB0aW1lbGluZV9fbWVldGluZ19fdHlwZS0tdGVsZXBob25lXCIpXG4gICAgICAgICAgICAudGV4dChcIiBcXHUyNjBFXCIpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZC5tZWV0aW5nc1swXS5tZWV0aW5nX3R5cGUgPT09IFwiZmFjZWJvb2tcIikge1xuICAgICAgICBlbC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidGltZWxpbmVfX21lZXRpbmdfX3R5cGUgdGltZWxpbmVfX21lZXRpbmdfX3R5cGUtLWZhY2Vib29rXCIpXG4gICAgICAgICAgICAuYXR0cihcInRpdGxlXCIsIFwiRmFjZWJvb2sgbWVldGluZ1wiKVxuICAgICAgICAgICAgLnRleHQoXCIgZlwiKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGQubWVldGluZ3NbMF0ubWVldGluZ190eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgZWwuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRpbWVsaW5lX19tZWV0aW5nX190eXBlIHRpbWVsaW5lX19tZWV0aW5nX190eXBlLS1yYWRpb1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0aXRsZVwiLCBcIlJhZGlvIG1lZXRpbmdcIilcbiAgICAgICAgICAgIC50ZXh0KFwiIPCfk7tcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWhjYVZvdGUgPSBnZXRBaGNhVm90ZShkLm9mZmljaWFsLm9mZmljZS5kaXZpc2lvbi5vY2RfaWQpO1xuICAgIGVsLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBgYWhjYS12b3RlLS0ke2FoY2FWb3RlfWApXG4gICAgICAgIC5hdHRyKFwidGl0bGVcIiwgYFZvdGVkICR7YWhjYVZvdGV9IG9uIHRoZSBBSENBYClcbiAgICAgICAgLnRleHQoKCkgPT4ge1xuICAgICAgICAgIGlmIChhaGNhVm90ZSA9PT0gXCJ5ZXNcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiIFxcdTI3MTRcIjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gXCIgXFx1Mjc0Y1wiO1xuICAgICAgICB9KTtcblxuICAgIGlmIChkLm1lZXRpbmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidGltZWxpbmVfX21lZXRpbmdfX2NvdW50XCIpXG4gICAgICAgICAgLnRleHQoYCB4JHtkLm1lZXRpbmdzLmxlbmd0aH1gKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJEYXkoc2VsLCBkYXRlRm9ybWF0LCBnZXRBaGNhVm90ZSkge1xuICBzZWwuYXBwZW5kKFwiaDJcIilcbiAgICAuYXR0cihcImNsYXNzXCIsIFwidGltZWxpbmVfX2RheV9fbnVtYmVyXCIpXG4gICAgLnRleHQoZCA9PiBkLmRheSk7XG5cbiAgc2VsLmFwcGVuZChcImRpdlwiKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0aW1lbGluZV9fZGF5X19kYXRlXCIpXG4gICAgLnRleHQoZCA9PiBkYXRlRm9ybWF0KGQuZGF0ZSkpO1xuXG4gIHNlbC5hcHBlbmQoXCJkaXZcIilcbiAgICAuYXR0cihcImNsYXNzXCIsIFwidGltZWxpbmVfX2RheV9fbGFiZWxcIilcbiAgICAudGV4dChkID0+IGQubGFiZWwpO1xuXG4gIHNlbC5zZWxlY3RBbGwoXCIudGltZWxpbmVfX21lZXRpbmdcIilcbiAgICAuZGF0YShkID0+IG1lZXRpbmdzQnlPZmZpY2lhbChkLm1lZXRpbmdzKSlcbiAgICAuZW50ZXIoKS5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0aW1lbGluZV9fbWVldGluZ1wiKVxuICAgICAgLmNhbGwocmVuZGVyT2ZmaWNpYWwsIGdldEFoY2FWb3RlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVldGluZ1RpbWVsaW5lKCkge1xuICBjb25zdCBkYXRlRm9ybWF0ID0gZDMudGltZUZvcm1hdChcIiVCICVkLCAlWVwiKTtcblxuICBmdW5jdGlvbiB0aW1lbGluZShzZWxlY3Rpb24sIGdldEFoY2FWb3RlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICBzZWxlY3Rpb24uZWFjaChmdW5jdGlvbiAoZGF5cykge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgICAgY29udGFpbmVyLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgICBjb250YWluZXIudGV4dChcIlwiKTtcblxuICAgICAgY29uc3QgdGltZWxpbmVDb250YWluZXIgPSBjb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRpbWVsaW5lXCIpO1xuXG4gICAgICB0aW1lbGluZUNvbnRhaW5lci5zZWxlY3RBbGwoXCIudGltZWxpbmVfX2RheVwiKVxuICAgICAgICAuZGF0YShkYXlzKVxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidGltZWxpbmVfX2RheVwiKVxuICAgICAgICAgIC5jYWxsKHJlbmRlckRheSwgZGF0ZUZvcm1hdCwgZ2V0QWhjYVZvdGUpO1xuXG4gICAgICAvLyBBZGQgYSBsYWJlbCB0aGF0IHNheXMgXCJEYXlcIiBiZWZvcmUgdGhlIGZpcnN0IG51bWJlci5cbiAgICAgIC8vIEkga25vdyByaWdodD8gQWxsIHRoaXMgY29kZSwganVzdCBmb3IgdGhhdC5cbiAgICAgIHRpbWVsaW5lQ29udGFpbmVyLnNlbGVjdEFsbChcIi50aW1lbGluZV9fZGF5X19udW1iZXJcIilcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGRheU51bWJlciA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICBjb25zdCB0ZXh0ID0gZGF5TnVtYmVyLnRleHQoKTtcblxuICAgICAgICAgIGRheU51bWJlci50ZXh0KFwiXCIpO1xuXG4gICAgICAgICAgZGF5TnVtYmVyLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRpbWVsaW5lX19kYXlfX2RheS1sYWJlbFwiKVxuICAgICAgICAgICAgICAudGV4dChcIkRheSBcIik7XG5cbiAgICAgICAgICBkYXlOdW1iZXIuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgICAgICAudGV4dCh0ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGltZWxpbmU7XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBsdXJhbGl6ZShzLCBuLCBwbHVyYWwpIHtcbiAgaWYgKG4gPT09IDEpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGlmIChwbHVyYWwpIHtcbiAgICByZXR1cm4gcGx1cmFsO1xuICB9XG5cbiAgcmV0dXJuIGAke3N9c2A7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwY3RGb3JtYXQodmFsKSB7XG4gIHJldHVybiBkMy5mb3JtYXQoXCIuMCVcIikodmFsKS5yZXBsYWNlKFwiJVwiLCBcIlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwU3R5bGVOdW1iZXIobnVtKSB7XG4gIGNvbnN0IGxvb2t1cCA9IHtcbiAgICAxOiBcIm9uZVwiLFxuICAgIDI6IFwidHdvXCIsXG4gICAgMzogXCJ0aHJlZVwiLFxuICAgIDQ6IFwiZm91clwiLFxuICAgIDU6IFwiZml2ZVwiLFxuICAgIDY6IFwic2l4XCIsXG4gICAgNzogXCJzZXZlblwiLFxuICAgIDg6IFwiZWlnaHRcIixcbiAgICA5OiBcIm5pbmVcIixcbiAgfTtcblxuICBpZiAobnVtID4gMCAmJiBudW0gPCAxMCkge1xuICAgIHJldHVybiBsb29rdXBbbnVtXTtcbiAgfVxuXG4gIHJldHVybiBudW07XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRRdWV1ZTtcbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xufVxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICBxdWV1ZS5wdXNoKGZ1bik7XG4gICAgaWYgKCFkcmFpbmluZykge1xuICAgICAgICBzZXRUaW1lb3V0KGRyYWluUXVldWUsIDApO1xuICAgIH1cbn07XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLy8gVGhpcyBmaWxlIGNhbiBiZSByZXF1aXJlZCBpbiBCcm93c2VyaWZ5IGFuZCBOb2RlLmpzIGZvciBhdXRvbWF0aWMgcG9seWZpbGxcbi8vIFRvIHVzZSBpdDogIHJlcXVpcmUoJ2VzNi1wcm9taXNlL2F1dG8nKTtcbid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8nKS5wb2x5ZmlsbCgpO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4vKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDQuMS4wXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdW5kZWZpbmVkO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdW5kZWZpbmVkO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICh7fSkudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4vLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMFxudmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuLy8gbm9kZVxuZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy93aGVuL2lzc3Vlcy80MTAgZm9yIGRldGFpbHNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbi8vIHZlcnR4XG5mdW5jdGlvbiB1c2VWZXJ0eFRpbWVyKCkge1xuICBpZiAodHlwZW9mIHZlcnR4TmV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmVydHhOZXh0KGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjtcbiAgfTtcbn1cblxuLy8gd2ViIHdvcmtlclxuZnVuY3Rpb24gdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2g7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFRpbWVvdXQoKSB7XG4gIC8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIGVzNi1wcm9taXNlIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuICAvLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSlcbiAgdmFyIGdsb2JhbFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnbG9iYWxTZXRUaW1lb3V0KGZsdXNoLCAxKTtcbiAgfTtcbn1cblxudmFyIHF1ZXVlID0gbmV3IEFycmF5KDEwMDApO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBxdWV1ZVtpXTtcbiAgICB2YXIgYXJnID0gcXVldWVbaSArIDFdO1xuXG4gICAgY2FsbGJhY2soYXJnKTtcblxuICAgIHF1ZXVlW2ldID0gdW5kZWZpbmVkO1xuICAgIHF1ZXVlW2kgKyAxXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRWZXJ0eCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgciA9IHJlcXVpcmU7XG4gICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdW5kZWZpbmVkO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG4gIGlmIChfc3RhdGUpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gX2FyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlQ2FsbGJhY2soX3N0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHBhcmVudC5fcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIFBST01JU0VfSUQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgcmV0dXJuIEdFVF9USEVOX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4uY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQgPT09IHRoZW4gJiYgbWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJCA9PT0gR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhlbiQkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJCkpIHtcbiAgICAgIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUsIGdldFRoZW4odmFsdWUpKTtcbiAgfSBlbHNlIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX29uZXJyb3IpIHtcbiAgICBwcm9taXNlLl9vbmVycm9yKHByb21pc2UuX3Jlc3VsdCk7XG4gIH1cblxuICBwdWJsaXNoKHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRDtcblxuICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwcm9taXNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICBfc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcblxuICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHBhcmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzO1xuICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hpbGQgPSB1bmRlZmluZWQsXG4gICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZCxcbiAgICAgIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICBjYWxsYmFjayA9IHN1YnNjcmliZXJzW2kgKyBzZXR0bGVkXTtcblxuICAgIGlmIChjaGlsZCkge1xuICAgICAgaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgIH1cbiAgfVxuXG4gIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIEVycm9yT2JqZWN0KCkge1xuICB0aGlzLmVycm9yID0gbnVsbDtcbn1cblxudmFyIFRSWV9DQVRDSF9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGRldGFpbCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBlO1xuICAgIHJldHVybiBUUllfQ0FUQ0hfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkLFxuICAgICAgZXJyb3IgPSB1bmRlZmluZWQsXG4gICAgICBzdWNjZWVkZWQgPSB1bmRlZmluZWQsXG4gICAgICBmYWlsZWQgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgdmFsdWUgPSB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gVFJZX0NBVENIX0VSUk9SKSB7XG4gICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgICAgIHZhbHVlLmVycm9yID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZmFpbGVkKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IEZVTEZJTExFRCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICB0cnkge1xuICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgZSk7XG4gIH1cbn1cblxudmFyIGlkID0gMDtcbmZ1bmN0aW9uIG5leHRJZCgpIHtcbiAgcmV0dXJuIGlkKys7XG59XG5cbmZ1bmN0aW9uIG1ha2VQcm9taXNlKHByb21pc2UpIHtcbiAgcHJvbWlzZVtQUk9NSVNFX0lEXSA9IGlkKys7XG4gIHByb21pc2UuX3N0YXRlID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3N1YnNjcmliZXJzID0gW107XG59XG5cbmZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gIHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgbWFrZVByb21pc2UodGhpcy5wcm9taXNlKTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5fcmVtYWluaW5nID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuX2VudW1lcmF0ZSgpO1xuICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX3JlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgX2lucHV0ID0gdGhpcy5faW5wdXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2VhY2hFbnRyeShfaW5wdXRbaV0sIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gIHZhciBjID0gdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcbiAgdmFyIHJlc29sdmUkJCA9IGMucmVzb2x2ZTtcblxuICBpZiAocmVzb2x2ZSQkID09PSByZXNvbHZlKSB7XG4gICAgdmFyIF90aGVuID0gZ2V0VGhlbihlbnRyeSk7XG5cbiAgICBpZiAoX3RoZW4gPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCBfdGhlbik7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlJCQoZW50cnkpO1xuICAgICAgfSksIGkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkKGVudHJ5KSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiAoc3RhdGUsIGksIHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORykge1xuICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuXG4gICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgaSkge1xuICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gIH0pO1xufTtcblxuLyoqXG4gIGBQcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gcmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgcmV0dXJuIG5ldyBFbnVtZXJhdG9yKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcGFzc2VkIGByZWFzb25gLlxuICBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgVGVybWlub2xvZ3lcbiAgLS0tLS0tLS0tLS1cblxuICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICBCYXNpYyBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tXG5cbiAgYGBganNcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBvbiBzdWNjZXNzXG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAvLyBvbiBmYWlsdXJlXG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgQWR2YW5jZWQgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLS0tLVxuXG4gIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgYGBganNcbiAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gIGBgYGpzXG4gIFByb21pc2UuYWxsKFtcbiAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0pO1xuICBgYGBcblxuICBAY2xhc3MgUHJvbWlzZVxuICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEBjb25zdHJ1Y3RvclxuKi9cbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICB0aGlzLl9yZXN1bHQgPSB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICB0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicgJiYgbmVlZHNSZXNvbHZlcigpO1xuICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgfVxufVxuXG5Qcm9taXNlLmFsbCA9IGFsbDtcblByb21pc2UucmFjZSA9IHJhY2U7XG5Qcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG5Qcm9taXNlLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7XG5Qcm9taXNlLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UuX2FzYXAgPSBhc2FwO1xuXG5Qcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFByb21pc2UsXG5cbiAgLyoqXG4gICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQ2hhaW5pbmdcbiAgICAtLS0tLS0tLVxuICBcbiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICB9KTtcbiAgXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gICAgfSk7XG4gICAgYGBgXG4gICAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFzc2ltaWxhdGlvblxuICAgIC0tLS0tLS0tLS0tLVxuICBcbiAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBTaW1wbGUgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCByZXN1bHQ7XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBhdXRob3IsIGJvb2tzO1xuICBcbiAgICB0cnkge1xuICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gIFxuICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcbiAgXG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICBcbiAgICB9XG4gIFxuICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZEF1dGhvcigpLlxuICAgICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCB0aGVuXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gIHRoZW46IHRoZW4sXG5cbiAgLyoqXG4gICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIFxuICAgIGBgYGpzXG4gICAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgfVxuICBcbiAgICAvLyBzeW5jaHJvbm91c1xuICAgIHRyeSB7XG4gICAgICBmaW5kQXV0aG9yKCk7XG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfVxuICBcbiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGNhdGNoXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIHZhciBsb2NhbCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IGdsb2JhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICAgIGlmIChQKSB7XG4gICAgICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gc2lsZW50bHkgaWdub3JlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvY2FsLlByb21pc2UgPSBQcm9taXNlO1xufVxuXG4vLyBTdHJhbmdlIGNvbXBhdC4uXG5Qcm9taXNlLnBvbHlmaWxsID0gcG9seWZpbGw7XG5Qcm9taXNlLlByb21pc2UgPSBQcm9taXNlO1xuXG5yZXR1cm4gUHJvbWlzZTtcblxufSkpKTtcblxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWxjell0Y0hKdmJXbHpaUzlrYVhOMEwyVnpOaTF3Y205dGFYTmxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b2hYRzRnS2lCQWIzWmxjblpwWlhjZ1pYTTJMWEJ5YjIxcGMyVWdMU0JoSUhScGJua2dhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdVSEp2YldselpYTXZRU3N1WEc0Z0tpQkFZMjl3ZVhKcFoyaDBJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOQ0JaWldoMVpHRWdTMkYwZWl3Z1ZHOXRJRVJoYkdVc0lGTjBaV1poYmlCUVpXNXVaWElnWVc1a0lHTnZiblJ5YVdKMWRHOXljeUFvUTI5dWRtVnljMmx2YmlCMGJ5QkZVellnUVZCSklHSjVJRXBoYTJVZ1FYSmphR2xpWVd4a0tWeHVJQ29nUUd4cFkyVnVjMlVnSUNCTWFXTmxibk5sWkNCMWJtUmxjaUJOU1ZRZ2JHbGpaVzV6WlZ4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0JUWldVZ2FIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDNOMFpXWmhibkJsYm01bGNpOWxjell0Y0hKdmJXbHpaUzl0WVhOMFpYSXZURWxEUlU1VFJWeHVJQ29nUUhabGNuTnBiMjRnSUNBMExqRXVNRnh1SUNvdlhHNWNiaWhtZFc1amRHbHZiaUFvWjJ4dlltRnNMQ0JtWVdOMGIzSjVLU0I3WEc0Z0lDQWdkSGx3Wlc5bUlHVjRjRzl5ZEhNZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhSNWNHVnZaaUJ0YjJSMWJHVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtDa2dPbHh1SUNBZ0lIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWkdWbWFXNWxMbUZ0WkNBL0lHUmxabWx1WlNobVlXTjBiM0o1S1NBNlhHNGdJQ0FnS0dkc2IySmhiQzVGVXpaUWNtOXRhWE5sSUQwZ1ptRmpkRzl5ZVNncEtUdGNibjBvZEdocGN5d2dLR1oxYm1OMGFXOXVJQ2dwSUhzZ0ozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1bWRXNWpkR2x2YmlCdlltcGxZM1JQY2taMWJtTjBhVzl1S0hncElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQjRJRDA5UFNBblpuVnVZM1JwYjI0bklIeDhJSFI1Y0dWdlppQjRJRDA5UFNBbmIySnFaV04wSnlBbUppQjRJQ0U5UFNCdWRXeHNPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMFoxYm1OMGFXOXVLSGdwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCNElEMDlQU0FuWm5WdVkzUnBiMjRuTzF4dWZWeHVYRzUyWVhJZ1gybHpRWEp5WVhrZ1BTQjFibVJsWm1sdVpXUTdYRzVwWmlBb0lVRnljbUY1TG1selFYSnlZWGtwSUh0Y2JpQWdYMmx6UVhKeVlYa2dQU0JtZFc1amRHbHZiaUFvZUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2VDa2dQVDA5SUNkYmIySnFaV04wSUVGeWNtRjVYU2M3WEc0Z0lIMDdYRzU5SUdWc2MyVWdlMXh1SUNCZmFYTkJjbkpoZVNBOUlFRnljbUY1TG1selFYSnlZWGs3WEc1OVhHNWNiblpoY2lCcGMwRnljbUY1SUQwZ1gybHpRWEp5WVhrN1hHNWNiblpoY2lCc1pXNGdQU0F3TzF4dWRtRnlJSFpsY25SNFRtVjRkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JuWmhjaUJqZFhOMGIyMVRZMmhsWkhWc1pYSkdiaUE5SUhWdVpHVm1hVzVsWkR0Y2JseHVkbUZ5SUdGellYQWdQU0JtZFc1amRHbHZiaUJoYzJGd0tHTmhiR3hpWVdOckxDQmhjbWNwSUh0Y2JpQWdjWFZsZFdWYmJHVnVYU0E5SUdOaGJHeGlZV05yTzF4dUlDQnhkV1YxWlZ0c1pXNGdLeUF4WFNBOUlHRnlaenRjYmlBZ2JHVnVJQ3M5SURJN1hHNGdJR2xtSUNoc1pXNGdQVDA5SURJcElIdGNiaUFnSUNBdkx5QkpaaUJzWlc0Z2FYTWdNaXdnZEdoaGRDQnRaV0Z1Y3lCMGFHRjBJSGRsSUc1bFpXUWdkRzhnYzJOb1pXUjFiR1VnWVc0Z1lYTjVibU1nWm14MWMyZ3VYRzRnSUNBZ0x5OGdTV1lnWVdSa2FYUnBiMjVoYkNCallXeHNZbUZqYTNNZ1lYSmxJSEYxWlhWbFpDQmlaV1p2Y21VZ2RHaGxJSEYxWlhWbElHbHpJR1pzZFhOb1pXUXNJSFJvWlhsY2JpQWdJQ0F2THlCM2FXeHNJR0psSUhCeWIyTmxjM05sWkNCaWVTQjBhR2x6SUdac2RYTm9JSFJvWVhRZ2QyVWdZWEpsSUhOamFHVmtkV3hwYm1jdVhHNGdJQ0FnYVdZZ0tHTjFjM1J2YlZOamFHVmtkV3hsY2tadUtTQjdYRzRnSUNBZ0lDQmpkWE4wYjIxVFkyaGxaSFZzWlhKR2JpaG1iSFZ6YUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE5qYUdWa2RXeGxSbXgxYzJnb0tUdGNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNibVoxYm1OMGFXOXVJSE5sZEZOamFHVmtkV3hsY2loelkyaGxaSFZzWlVadUtTQjdYRzRnSUdOMWMzUnZiVk5qYUdWa2RXeGxja1p1SUQwZ2MyTm9aV1IxYkdWR2JqdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyVjBRWE5oY0NoaGMyRndSbTRwSUh0Y2JpQWdZWE5oY0NBOUlHRnpZWEJHYmp0Y2JuMWNibHh1ZG1GeUlHSnliM2R6WlhKWGFXNWtiM2NnUFNCMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JSGRwYm1SdmR5QTZJSFZ1WkdWbWFXNWxaRHRjYm5aaGNpQmljbTkzYzJWeVIyeHZZbUZzSUQwZ1luSnZkM05sY2xkcGJtUnZkeUI4ZkNCN2ZUdGNiblpoY2lCQ2NtOTNjMlZ5VFhWMFlYUnBiMjVQWW5ObGNuWmxjaUE5SUdKeWIzZHpaWEpIYkc5aVlXd3VUWFYwWVhScGIyNVBZbk5sY25abGNpQjhmQ0JpY205M2MyVnlSMnh2WW1Gc0xsZGxZa3RwZEUxMWRHRjBhVzl1VDJKelpYSjJaWEk3WEc1MllYSWdhWE5PYjJSbElEMGdkSGx3Wlc5bUlITmxiR1lnUFQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhSNWNHVnZaaUJ3Y205alpYTnpJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUFvZTMwcExuUnZVM1J5YVc1bkxtTmhiR3dvY0hKdlkyVnpjeWtnUFQwOUlDZGJiMkpxWldOMElIQnliMk5sYzNOZEp6dGNibHh1THk4Z2RHVnpkQ0JtYjNJZ2QyVmlJSGR2Y210bGNpQmlkWFFnYm05MElHbHVJRWxGTVRCY2JuWmhjaUJwYzFkdmNtdGxjaUE5SUhSNWNHVnZaaUJWYVc1ME9FTnNZVzF3WldSQmNuSmhlU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JR2x0Y0c5eWRGTmpjbWx3ZEhNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIUjVjR1Z2WmlCTlpYTnpZV2RsUTJoaGJtNWxiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDYzdYRzVjYmk4dklHNXZaR1ZjYm1aMWJtTjBhVzl1SUhWelpVNWxlSFJVYVdOcktDa2dlMXh1SUNBdkx5QnViMlJsSUhabGNuTnBiMjRnTUM0eE1DNTRJR1JwYzNCc1lYbHpJR0VnWkdWd2NtVmpZWFJwYjI0Z2QyRnlibWx1WnlCM2FHVnVJRzVsZUhSVWFXTnJJR2x6SUhWelpXUWdjbVZqZFhKemFYWmxiSGxjYmlBZ0x5OGdjMlZsSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5amRXcHZhbk12ZDJobGJpOXBjM04xWlhNdk5ERXdJR1p2Y2lCa1pYUmhhV3h6WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm14MWMyZ3BPMXh1SUNCOU8xeHVmVnh1WEc0dkx5QjJaWEowZUZ4dVpuVnVZM1JwYjI0Z2RYTmxWbVZ5ZEhoVWFXMWxjaWdwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUIyWlhKMGVFNWxlSFFnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSFpsY25SNFRtVjRkQ2htYkhWemFDazdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjFjMlZUWlhSVWFXMWxiM1YwS0NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhWelpVMTFkR0YwYVc5dVQySnpaWEoyWlhJb0tTQjdYRzRnSUhaaGNpQnBkR1Z5WVhScGIyNXpJRDBnTUR0Y2JpQWdkbUZ5SUc5aWMyVnlkbVZ5SUQwZ2JtVjNJRUp5YjNkelpYSk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUtHWnNkWE5vS1R0Y2JpQWdkbUZ5SUc1dlpHVWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTZ25KeWs3WEc0Z0lHOWljMlZ5ZG1WeUxtOWljMlZ5ZG1Vb2JtOWtaU3dnZXlCamFHRnlZV04wWlhKRVlYUmhPaUIwY25WbElIMHBPMXh1WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2JtOWtaUzVrWVhSaElEMGdhWFJsY21GMGFXOXVjeUE5SUNzcmFYUmxjbUYwYVc5dWN5QWxJREk3WEc0Z0lIMDdYRzU5WEc1Y2JpOHZJSGRsWWlCM2IzSnJaWEpjYm1aMWJtTjBhVzl1SUhWelpVMWxjM05oWjJWRGFHRnVibVZzS0NrZ2UxeHVJQ0IyWVhJZ1kyaGhibTVsYkNBOUlHNWxkeUJOWlhOellXZGxRMmhoYm01bGJDZ3BPMXh1SUNCamFHRnVibVZzTG5CdmNuUXhMbTl1YldWemMyRm5aU0E5SUdac2RYTm9PMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYUdGdWJtVnNMbkJ2Y25ReUxuQnZjM1JOWlhOellXZGxLREFwTzF4dUlDQjlPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFjMlZUWlhSVWFXMWxiM1YwS0NrZ2UxeHVJQ0F2THlCVGRHOXlaU0J6WlhSVWFXMWxiM1YwSUhKbFptVnlaVzVqWlNCemJ5Qmxjell0Y0hKdmJXbHpaU0IzYVd4c0lHSmxJSFZ1WVdabVpXTjBaV1FnWW5sY2JpQWdMeThnYjNSb1pYSWdZMjlrWlNCdGIyUnBabmxwYm1jZ2MyVjBWR2x0Wlc5MWRDQW9iR2xyWlNCemFXNXZiaTUxYzJWR1lXdGxWR2x0WlhKektDa3BYRzRnSUhaaGNpQm5iRzlpWVd4VFpYUlVhVzFsYjNWMElEMGdjMlYwVkdsdFpXOTFkRHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCeVpYUjFjbTRnWjJ4dlltRnNVMlYwVkdsdFpXOTFkQ2htYkhWemFDd2dNU2s3WEc0Z0lIMDdYRzU5WEc1Y2JuWmhjaUJ4ZFdWMVpTQTlJRzVsZHlCQmNuSmhlU2d4TURBd0tUdGNibVoxYm1OMGFXOXVJR1pzZFhOb0tDa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxianNnYVNBclBTQXlLU0I3WEc0Z0lDQWdkbUZ5SUdOaGJHeGlZV05ySUQwZ2NYVmxkV1ZiYVYwN1hHNGdJQ0FnZG1GeUlHRnlaeUE5SUhGMVpYVmxXMmtnS3lBeFhUdGNibHh1SUNBZ0lHTmhiR3hpWVdOcktHRnlaeWs3WEc1Y2JpQWdJQ0J4ZFdWMVpWdHBYU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0J4ZFdWMVpWdHBJQ3NnTVYwZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JseHVJQ0JzWlc0Z1BTQXdPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhkSFJsYlhCMFZtVnlkSGdvS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlISWdQU0J5WlhGMWFYSmxPMXh1SUNBZ0lIWmhjaUIyWlhKMGVDQTlJSElvSjNabGNuUjRKeWs3WEc0Z0lDQWdkbVZ5ZEhoT1pYaDBJRDBnZG1WeWRIZ3VjblZ1VDI1TWIyOXdJSHg4SUhabGNuUjRMbkoxYms5dVEyOXVkR1Y0ZER0Y2JpQWdJQ0J5WlhSMWNtNGdkWE5sVm1WeWRIaFVhVzFsY2lncE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFZ6WlZObGRGUnBiV1Z2ZFhRb0tUdGNiaUFnZlZ4dWZWeHVYRzUyWVhJZ2MyTm9aV1IxYkdWR2JIVnphQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpOHZJRVJsWTJsa1pTQjNhR0YwSUdGemVXNWpJRzFsZEdodlpDQjBieUIxYzJVZ2RHOGdkSEpwWjJkbGNtbHVaeUJ3Y205alpYTnphVzVuSUc5bUlIRjFaWFZsWkNCallXeHNZbUZqYTNNNlhHNXBaaUFvYVhOT2IyUmxLU0I3WEc0Z0lITmphR1ZrZFd4bFJteDFjMmdnUFNCMWMyVk9aWGgwVkdsamF5Z3BPMXh1ZlNCbGJITmxJR2xtSUNoQ2NtOTNjMlZ5VFhWMFlYUnBiMjVQWW5ObGNuWmxjaWtnZTF4dUlDQnpZMmhsWkhWc1pVWnNkWE5vSUQwZ2RYTmxUWFYwWVhScGIyNVBZbk5sY25abGNpZ3BPMXh1ZlNCbGJITmxJR2xtSUNocGMxZHZjbXRsY2lrZ2UxeHVJQ0J6WTJobFpIVnNaVVpzZFhOb0lEMGdkWE5sVFdWemMyRm5aVU5vWVc1dVpXd29LVHRjYm4wZ1pXeHpaU0JwWmlBb1luSnZkM05sY2xkcGJtUnZkeUE5UFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFI1Y0dWdlppQnlaWEYxYVhKbElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJSE5qYUdWa2RXeGxSbXgxYzJnZ1BTQmhkSFJsYlhCMFZtVnlkSGdvS1R0Y2JuMGdaV3h6WlNCN1hHNGdJSE5qYUdWa2RXeGxSbXgxYzJnZ1BTQjFjMlZUWlhSVWFXMWxiM1YwS0NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhSb1pXNG9iMjVHZFd4bWFXeHNiV1Z1ZEN3Z2IyNVNaV3BsWTNScGIyNHBJSHRjYmlBZ2RtRnlJRjloY21kMWJXVnVkSE1nUFNCaGNtZDFiV1Z1ZEhNN1hHNWNiaUFnZG1GeUlIQmhjbVZ1ZENBOUlIUm9hWE03WEc1Y2JpQWdkbUZ5SUdOb2FXeGtJRDBnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb2JtOXZjQ2s3WEc1Y2JpQWdhV1lnS0dOb2FXeGtXMUJTVDAxSlUwVmZTVVJkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnRZV3RsVUhKdmJXbHpaU2hqYUdsc1pDazdYRzRnSUgxY2JseHVJQ0IyWVhJZ1gzTjBZWFJsSUQwZ2NHRnlaVzUwTGw5emRHRjBaVHRjYmx4dUlDQnBaaUFvWDNOMFlYUmxLU0I3WEc0Z0lDQWdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhaaGNpQmpZV3hzWW1GamF5QTlJRjloY21kMWJXVnVkSE5iWDNOMFlYUmxJQzBnTVYwN1hHNGdJQ0FnSUNCaGMyRndLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdWRtOXJaVU5oYkd4aVlXTnJLRjl6ZEdGMFpTd2dZMmhwYkdRc0lHTmhiR3hpWVdOckxDQndZWEpsYm5RdVgzSmxjM1ZzZENrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtTZ3BPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSE4xWW5OamNtbGlaU2h3WVhKbGJuUXNJR05vYVd4a0xDQnZia1oxYkdacGJHeHRaVzUwTENCdmJsSmxhbVZqZEdsdmJpazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZMmhwYkdRN1hHNTlYRzVjYmk4cUtseHVJQ0JnVUhKdmJXbHpaUzV5WlhOdmJIWmxZQ0J5WlhSMWNtNXpJR0VnY0hKdmJXbHpaU0IwYUdGMElIZHBiR3dnWW1WamIyMWxJSEpsYzI5c2RtVmtJSGRwZEdnZ2RHaGxYRzRnSUhCaGMzTmxaQ0JnZG1Gc2RXVmdMaUJKZENCcGN5QnphRzl5ZEdoaGJtUWdabTl5SUhSb1pTQm1iMnhzYjNkcGJtYzZYRzVjYmlBZ1lHQmdhbUYyWVhOamNtbHdkRnh1SUNCc1pYUWdjSEp2YldselpTQTlJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2w3WEc0Z0lDQWdjbVZ6YjJ4MlpTZ3hLVHRjYmlBZ2ZTazdYRzVjYmlBZ2NISnZiV2x6WlM1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnSUNBdkx5QjJZV3gxWlNBOVBUMGdNVnh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnU1c1emRHVmhaQ0J2WmlCM2NtbDBhVzVuSUhSb1pTQmhZbTkyWlN3Z2VXOTFjaUJqYjJSbElHNXZkeUJ6YVcxd2JIa2dZbVZqYjIxbGN5QjBhR1VnWm05c2JHOTNhVzVuT2x4dVhHNGdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdiR1YwSUhCeWIyMXBjMlVnUFNCUWNtOXRhWE5sTG5KbGMyOXNkbVVvTVNrN1hHNWNiaUFnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0F2THlCMllXeDFaU0E5UFQwZ01WeHVJQ0I5S1R0Y2JpQWdZR0JnWEc1Y2JpQWdRRzFsZEdodlpDQnlaWE52YkhabFhHNGdJRUJ6ZEdGMGFXTmNiaUFnUUhCaGNtRnRJSHRCYm5sOUlIWmhiSFZsSUhaaGJIVmxJSFJvWVhRZ2RHaGxJSEpsZEhWeWJtVmtJSEJ5YjIxcGMyVWdkMmxzYkNCaVpTQnlaWE52YkhabFpDQjNhWFJvWEc0Z0lGVnpaV1oxYkNCbWIzSWdkRzl2YkdsdVp5NWNiaUFnUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnWVNCd2NtOXRhWE5sSUhSb1lYUWdkMmxzYkNCaVpXTnZiV1VnWm5Wc1ptbHNiR1ZrSUhkcGRHZ2dkR2hsSUdkcGRtVnVYRzRnSUdCMllXeDFaV0JjYmlvdlhHNW1kVzVqZEdsdmJpQnlaWE52YkhabEtHOWlhbVZqZENrZ2UxeHVJQ0F2S21wemFHbHVkQ0IyWVd4cFpIUm9hWE02ZEhKMVpTQXFMMXh1SUNCMllYSWdRMjl1YzNSeWRXTjBiM0lnUFNCMGFHbHpPMXh1WEc0Z0lHbG1JQ2h2WW1wbFkzUWdKaVlnZEhsd1pXOW1JRzlpYW1WamRDQTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2IySnFaV04wTG1OdmJuTjBjblZqZEc5eUlEMDlQU0JEYjI1emRISjFZM1J2Y2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUTdYRzRnSUgxY2JseHVJQ0IyWVhJZ2NISnZiV2x6WlNBOUlHNWxkeUJEYjI1emRISjFZM1J2Y2lodWIyOXdLVHRjYmlBZ1gzSmxjMjlzZG1Vb2NISnZiV2x6WlN3Z2IySnFaV04wS1R0Y2JpQWdjbVYwZFhKdUlIQnliMjFwYzJVN1hHNTlYRzVjYm5aaGNpQlFVazlOU1ZORlgwbEVJRDBnVFdGMGFDNXlZVzVrYjIwb0tTNTBiMU4wY21sdVp5Z3pOaWt1YzNWaWMzUnlhVzVuS0RFMktUdGNibHh1Wm5WdVkzUnBiMjRnYm05dmNDZ3BJSHQ5WEc1Y2JuWmhjaUJRUlU1RVNVNUhJRDBnZG05cFpDQXdPMXh1ZG1GeUlFWlZURVpKVEV4RlJDQTlJREU3WEc1MllYSWdVa1ZLUlVOVVJVUWdQU0F5TzF4dVhHNTJZWElnUjBWVVgxUklSVTVmUlZKU1QxSWdQU0J1WlhjZ1JYSnliM0pQWW1wbFkzUW9LVHRjYmx4dVpuVnVZM1JwYjI0Z2MyVnNaa1oxYkdacGJHeHRaVzUwS0NrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUZSNWNHVkZjbkp2Y2loY0lsbHZkU0JqWVc1dWIzUWdjbVZ6YjJ4MlpTQmhJSEJ5YjIxcGMyVWdkMmwwYUNCcGRITmxiR1pjSWlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdOaGJtNXZkRkpsZEhWeWJrOTNiaWdwSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJVZVhCbFJYSnliM0lvSjBFZ2NISnZiV2x6WlhNZ1kyRnNiR0poWTJzZ1kyRnVibTkwSUhKbGRIVnliaUIwYUdGMElITmhiV1VnY0hKdmJXbHpaUzRuS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFZHaGxiaWh3Y205dGFYTmxLU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnliMjFwYzJVdWRHaGxianRjYmlBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0JIUlZSZlZFaEZUbDlGVWxKUFVpNWxjbkp2Y2lBOUlHVnljbTl5TzF4dUlDQWdJSEpsZEhWeWJpQkhSVlJmVkVoRlRsOUZVbEpQVWp0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjBjbmxVYUdWdUtIUm9aVzRzSUhaaGJIVmxMQ0JtZFd4bWFXeHNiV1Z1ZEVoaGJtUnNaWElzSUhKbGFtVmpkR2x2YmtoaGJtUnNaWElwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IwYUdWdUxtTmhiR3dvZG1Gc2RXVXNJR1oxYkdacGJHeHRaVzUwU0dGdVpHeGxjaXdnY21WcVpXTjBhVzl1U0dGdVpHeGxjaWs3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1pUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJvWVc1a2JHVkdiM0psYVdkdVZHaGxibUZpYkdVb2NISnZiV2x6WlN3Z2RHaGxibUZpYkdVc0lIUm9aVzRwSUh0Y2JpQWdZWE5oY0NobWRXNWpkR2x2YmlBb2NISnZiV2x6WlNrZ2UxeHVJQ0FnSUhaaGNpQnpaV0ZzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGNubFVhR1Z1S0hSb1pXNHNJSFJvWlc1aFlteGxMQ0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJR2xtSUNoelpXRnNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYzJWaGJHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHbG1JQ2gwYUdWdVlXSnNaU0FoUFQwZ2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ1gzSmxjMjlzZG1Vb2NISnZiV2x6WlN3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWm5Wc1ptbHNiQ2h3Y205dGFYTmxMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdhV1lnS0hObFlXeGxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J6WldGc1pXUWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lISmxZWE52YmlrN1hHNGdJQ0FnZlN3Z0oxTmxkSFJzWlRvZ0p5QXJJQ2h3Y205dGFYTmxMbDlzWVdKbGJDQjhmQ0FuSUhWdWEyNXZkMjRnY0hKdmJXbHpaU2NwS1R0Y2JseHVJQ0FnSUdsbUlDZ2hjMlZoYkdWa0lDWW1JR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQnpaV0ZzWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0JsY25KdmNpazdYRzRnSUNBZ2ZWeHVJQ0I5TENCd2NtOXRhWE5sS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYUdGdVpHeGxUM2R1VkdobGJtRmliR1VvY0hKdmJXbHpaU3dnZEdobGJtRmliR1VwSUh0Y2JpQWdhV1lnS0hSb1pXNWhZbXhsTGw5emRHRjBaU0E5UFQwZ1JsVk1Sa2xNVEVWRUtTQjdYRzRnSUNBZ1puVnNabWxzYkNod2NtOXRhWE5sTENCMGFHVnVZV0pzWlM1ZmNtVnpkV3gwS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2gwYUdWdVlXSnNaUzVmYzNSaGRHVWdQVDA5SUZKRlNrVkRWRVZFS1NCN1hHNGdJQ0FnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0IwYUdWdVlXSnNaUzVmY21WemRXeDBLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J6ZFdKelkzSnBZbVVvZEdobGJtRmliR1VzSUhWdVpHVm1hVzVsWkN3Z1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDNKbGMyOXNkbVVvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmZjbVZxWldOMEtIQnliMjFwYzJVc0lISmxZWE52YmlrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdhR0Z1Wkd4bFRXRjVZbVZVYUdWdVlXSnNaU2h3Y205dGFYTmxMQ0J0WVhsaVpWUm9aVzVoWW14bExDQjBhR1Z1SkNRcElIdGNiaUFnYVdZZ0tHMWhlV0psVkdobGJtRmliR1V1WTI5dWMzUnlkV04wYjNJZ1BUMDlJSEJ5YjIxcGMyVXVZMjl1YzNSeWRXTjBiM0lnSmlZZ2RHaGxiaVFrSUQwOVBTQjBhR1Z1SUNZbUlHMWhlV0psVkdobGJtRmliR1V1WTI5dWMzUnlkV04wYjNJdWNtVnpiMngyWlNBOVBUMGdjbVZ6YjJ4MlpTa2dlMXh1SUNBZ0lHaGhibVJzWlU5M2JsUm9aVzVoWW14bEtIQnliMjFwYzJVc0lHMWhlV0psVkdobGJtRmliR1VwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaDBhR1Z1SkNRZ1BUMDlJRWRGVkY5VVNFVk9YMFZTVWs5U0tTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lFZEZWRjlVU0VWT1gwVlNVazlTTG1WeWNtOXlLVHRjYmlBZ0lDQWdJRWRGVkY5VVNFVk9YMFZTVWs5U0xtVnljbTl5SUQwZ2JuVnNiRHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvWlc0a0pDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCbWRXeG1hV3hzS0hCeWIyMXBjMlVzSUcxaGVXSmxWR2hsYm1GaWJHVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5HZFc1amRHbHZiaWgwYUdWdUpDUXBLU0I3WEc0Z0lDQWdJQ0JvWVc1a2JHVkdiM0psYVdkdVZHaGxibUZpYkdVb2NISnZiV2x6WlN3Z2JXRjVZbVZVYUdWdVlXSnNaU3dnZEdobGJpUWtLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1puVnNabWxzYkNod2NtOXRhWE5sTENCdFlYbGlaVlJvWlc1aFlteGxLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNKbGMyOXNkbVVvY0hKdmJXbHpaU3dnZG1Gc2RXVXBJSHRjYmlBZ2FXWWdLSEJ5YjIxcGMyVWdQVDA5SUhaaGJIVmxLU0I3WEc0Z0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQnpaV3htUm5Wc1ptbHNiRzFsYm5Rb0tTazdYRzRnSUgwZ1pXeHpaU0JwWmlBb2IySnFaV04wVDNKR2RXNWpkR2x2YmloMllXeDFaU2twSUh0Y2JpQWdJQ0JvWVc1a2JHVk5ZWGxpWlZSb1pXNWhZbXhsS0hCeWIyMXBjMlVzSUhaaGJIVmxMQ0JuWlhSVWFHVnVLSFpoYkhWbEtTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjSFZpYkdsemFGSmxhbVZqZEdsdmJpaHdjbTl0YVhObEtTQjdYRzRnSUdsbUlDaHdjbTl0YVhObExsOXZibVZ5Y205eUtTQjdYRzRnSUNBZ2NISnZiV2x6WlM1ZmIyNWxjbkp2Y2lod2NtOXRhWE5sTGw5eVpYTjFiSFFwTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2x6YUNod2NtOXRhWE5sS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm5Wc1ptbHNiQ2h3Y205dGFYTmxMQ0IyWVd4MVpTa2dlMXh1SUNCcFppQW9jSEp2YldselpTNWZjM1JoZEdVZ0lUMDlJRkJGVGtSSlRrY3BJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQndjbTl0YVhObExsOXlaWE4xYkhRZ1BTQjJZV3gxWlR0Y2JpQWdjSEp2YldselpTNWZjM1JoZEdVZ1BTQkdWVXhHU1V4TVJVUTdYRzVjYmlBZ2FXWWdLSEJ5YjIxcGMyVXVYM04xWW5OamNtbGlaWEp6TG14bGJtZDBhQ0FoUFQwZ01Da2dlMXh1SUNBZ0lHRnpZWEFvY0hWaWJHbHphQ3dnY0hKdmJXbHpaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzSmxhbVZqZENod2NtOXRhWE5sTENCeVpXRnpiMjRwSUh0Y2JpQWdhV1lnS0hCeWIyMXBjMlV1WDNOMFlYUmxJQ0U5UFNCUVJVNUVTVTVIS1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNGdJSEJ5YjIxcGMyVXVYM04wWVhSbElEMGdVa1ZLUlVOVVJVUTdYRzRnSUhCeWIyMXBjMlV1WDNKbGMzVnNkQ0E5SUhKbFlYTnZianRjYmx4dUlDQmhjMkZ3S0hCMVlteHBjMmhTWldwbFkzUnBiMjRzSUhCeWIyMXBjMlVwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6ZFdKelkzSnBZbVVvY0dGeVpXNTBMQ0JqYUdsc1pDd2diMjVHZFd4bWFXeHNiV1Z1ZEN3Z2IyNVNaV3BsWTNScGIyNHBJSHRjYmlBZ2RtRnlJRjl6ZFdKelkzSnBZbVZ5Y3lBOUlIQmhjbVZ1ZEM1ZmMzVmljMk55YVdKbGNuTTdYRzRnSUhaaGNpQnNaVzVuZEdnZ1BTQmZjM1ZpYzJOeWFXSmxjbk11YkdWdVozUm9PMXh1WEc0Z0lIQmhjbVZ1ZEM1ZmIyNWxjbkp2Y2lBOUlHNTFiR3c3WEc1Y2JpQWdYM04xWW5OamNtbGlaWEp6VzJ4bGJtZDBhRjBnUFNCamFHbHNaRHRjYmlBZ1gzTjFZbk5qY21saVpYSnpXMnhsYm1kMGFDQXJJRVpWVEVaSlRFeEZSRjBnUFNCdmJrWjFiR1pwYkd4dFpXNTBPMXh1SUNCZmMzVmljMk55YVdKbGNuTmJiR1Z1WjNSb0lDc2dVa1ZLUlVOVVJVUmRJRDBnYjI1U1pXcGxZM1JwYjI0N1hHNWNiaUFnYVdZZ0tHeGxibWQwYUNBOVBUMGdNQ0FtSmlCd1lYSmxiblF1WDNOMFlYUmxLU0I3WEc0Z0lDQWdZWE5oY0Nod2RXSnNhWE5vTENCd1lYSmxiblFwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQjFZbXhwYzJnb2NISnZiV2x6WlNrZ2UxeHVJQ0IyWVhJZ2MzVmljMk55YVdKbGNuTWdQU0J3Y205dGFYTmxMbDl6ZFdKelkzSnBZbVZ5Y3p0Y2JpQWdkbUZ5SUhObGRIUnNaV1FnUFNCd2NtOXRhWE5sTGw5emRHRjBaVHRjYmx4dUlDQnBaaUFvYzNWaWMyTnlhV0psY25NdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdOb2FXeGtJRDBnZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnWTJGc2JHSmhZMnNnUFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCa1pYUmhhV3dnUFNCd2NtOXRhWE5sTGw5eVpYTjFiSFE3WEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6ZFdKelkzSnBZbVZ5Y3k1c1pXNW5kR2c3SUdrZ0t6MGdNeWtnZTF4dUlDQWdJR05vYVd4a0lEMGdjM1ZpYzJOeWFXSmxjbk5iYVYwN1hHNGdJQ0FnWTJGc2JHSmhZMnNnUFNCemRXSnpZM0pwWW1WeWMxdHBJQ3NnYzJWMGRHeGxaRjA3WEc1Y2JpQWdJQ0JwWmlBb1kyaHBiR1FwSUh0Y2JpQWdJQ0FnSUdsdWRtOXJaVU5oYkd4aVlXTnJLSE5sZEhSc1pXUXNJR05vYVd4a0xDQmpZV3hzWW1GamF5d2daR1YwWVdsc0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWTJGc2JHSmhZMnNvWkdWMFlXbHNLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3Y205dGFYTmxMbDl6ZFdKelkzSnBZbVZ5Y3k1c1pXNW5kR2dnUFNBd08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCRmNuSnZjazlpYW1WamRDZ3BJSHRjYmlBZ2RHaHBjeTVsY25KdmNpQTlJRzUxYkd3N1hHNTlYRzVjYm5aaGNpQlVVbGxmUTBGVVEwaGZSVkpTVDFJZ1BTQnVaWGNnUlhKeWIzSlBZbXBsWTNRb0tUdGNibHh1Wm5WdVkzUnBiMjRnZEhKNVEyRjBZMmdvWTJGc2JHSmhZMnNzSUdSbGRHRnBiQ2tnZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5aGtaWFJoYVd3cE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnVkZKWlgwTkJWRU5JWDBWU1VrOVNMbVZ5Y205eUlEMGdaVHRjYmlBZ0lDQnlaWFIxY200Z1ZGSlpYME5CVkVOSVgwVlNVazlTTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHVkbTlyWlVOaGJHeGlZV05yS0hObGRIUnNaV1FzSUhCeWIyMXBjMlVzSUdOaGJHeGlZV05yTENCa1pYUmhhV3dwSUh0Y2JpQWdkbUZ5SUdoaGMwTmhiR3hpWVdOcklEMGdhWE5HZFc1amRHbHZiaWhqWVd4c1ltRmpheWtzWEc0Z0lDQWdJQ0IyWVd4MVpTQTlJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJR1Z5Y205eUlEMGdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdjM1ZqWTJWbFpHVmtJRDBnZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnWm1GcGJHVmtJRDBnZFc1a1pXWnBibVZrTzF4dVhHNGdJR2xtSUNob1lYTkRZV3hzWW1GamF5a2dlMXh1SUNBZ0lIWmhiSFZsSUQwZ2RISjVRMkYwWTJnb1kyRnNiR0poWTJzc0lHUmxkR0ZwYkNrN1hHNWNiaUFnSUNCcFppQW9kbUZzZFdVZ1BUMDlJRlJTV1Y5RFFWUkRTRjlGVWxKUFVpa2dlMXh1SUNBZ0lDQWdabUZwYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdWeWNtOXlJRDBnZG1Gc2RXVXVaWEp5YjNJN1hHNGdJQ0FnSUNCMllXeDFaUzVsY25KdmNpQTlJRzUxYkd3N1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4xWTJObFpXUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSEJ5YjIxcGMyVWdQVDA5SUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJR05oYm01dmRGSmxkSFZ5Yms5M2JpZ3BLVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnNkV1VnUFNCa1pYUmhhV3c3WEc0Z0lDQWdjM1ZqWTJWbFpHVmtJRDBnZEhKMVpUdGNiaUFnZlZ4dVhHNGdJR2xtSUNod2NtOXRhWE5sTGw5emRHRjBaU0FoUFQwZ1VFVk9SRWxPUnlrZ2UxeHVJQ0FnSUM4dklHNXZiM0JjYmlBZ2ZTQmxiSE5sSUdsbUlDaG9ZWE5EWVd4c1ltRmpheUFtSmlCemRXTmpaV1ZrWldRcElIdGNiaUFnSUNBZ0lGOXlaWE52YkhabEtIQnliMjFwYzJVc0lIWmhiSFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0daaGFXeGxaQ2tnZTF4dUlDQWdJQ0FnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0JsY25KdmNpazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpaWFIwYkdWa0lEMDlQU0JHVlV4R1NVeE1SVVFwSUh0Y2JpQWdJQ0FnSUdaMWJHWnBiR3dvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jMlYwZEd4bFpDQTlQVDBnVWtWS1JVTlVSVVFwSUh0Y2JpQWdJQ0FnSUY5eVpXcGxZM1FvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkR2xoYkdsNlpWQnliMjFwYzJVb2NISnZiV2x6WlN3Z2NtVnpiMngyWlhJcElIdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYTnZiSFpsY2lobWRXNWpkR2x2YmlCeVpYTnZiSFpsVUhKdmJXbHpaU2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdYM0psYzI5c2RtVW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgwc0lHWjFibU4wYVc5dUlISmxhbVZqZEZCeWIyMXBjMlVvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSEpsWVhOdmJpazdYRzRnSUNBZ2ZTazdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUdVcE8xeHVJQ0I5WEc1OVhHNWNiblpoY2lCcFpDQTlJREE3WEc1bWRXNWpkR2x2YmlCdVpYaDBTV1FvS1NCN1hHNGdJSEpsZEhWeWJpQnBaQ3NyTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ0WVd0bFVISnZiV2x6WlNod2NtOXRhWE5sS1NCN1hHNGdJSEJ5YjIxcGMyVmJVRkpQVFVsVFJWOUpSRjBnUFNCcFpDc3JPMXh1SUNCd2NtOXRhWE5sTGw5emRHRjBaU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdjSEp2YldselpTNWZjbVZ6ZFd4MElEMGdkVzVrWldacGJtVmtPMXh1SUNCd2NtOXRhWE5sTGw5emRXSnpZM0pwWW1WeWN5QTlJRnRkTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJGYm5WdFpYSmhkRzl5S0VOdmJuTjBjblZqZEc5eUxDQnBibkIxZENrZ2UxeHVJQ0IwYUdsekxsOXBibk4wWVc1alpVTnZibk4wY25WamRHOXlJRDBnUTI5dWMzUnlkV04wYjNJN1hHNGdJSFJvYVhNdWNISnZiV2x6WlNBOUlHNWxkeUJEYjI1emRISjFZM1J2Y2lodWIyOXdLVHRjYmx4dUlDQnBaaUFvSVhSb2FYTXVjSEp2YldselpWdFFVazlOU1ZORlgwbEVYU2tnZTF4dUlDQWdJRzFoYTJWUWNtOXRhWE5sS0hSb2FYTXVjSEp2YldselpTazdYRzRnSUgxY2JseHVJQ0JwWmlBb2FYTkJjbkpoZVNocGJuQjFkQ2twSUh0Y2JpQWdJQ0IwYUdsekxsOXBibkIxZENBOUlHbHVjSFYwTzF4dUlDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ2FXNXdkWFF1YkdWdVozUm9PMXh1SUNBZ0lIUm9hWE11WDNKbGJXRnBibWx1WnlBOUlHbHVjSFYwTG14bGJtZDBhRHRjYmx4dUlDQWdJSFJvYVhNdVgzSmxjM1ZzZENBOUlHNWxkeUJCY25KaGVTaDBhR2x6TG14bGJtZDBhQ2s3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lHWjFiR1pwYkd3b2RHaHBjeTV3Y205dGFYTmxMQ0IwYUdsekxsOXlaWE4xYkhRcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxteGxibWQwYUNBOUlIUm9hWE11YkdWdVozUm9JSHg4SURBN1hHNGdJQ0FnSUNCMGFHbHpMbDlsYm5WdFpYSmhkR1VvS1R0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5eVpXMWhhVzVwYm1jZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ1puVnNabWxzYkNoMGFHbHpMbkJ5YjIxcGMyVXNJSFJvYVhNdVgzSmxjM1ZzZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUY5eVpXcGxZM1FvZEdocGN5NXdjbTl0YVhObExDQjJZV3hwWkdGMGFXOXVSWEp5YjNJb0tTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnZG1Gc2FXUmhkR2x2YmtWeWNtOXlLQ2tnZTF4dUlDQnlaWFIxY200Z2JtVjNJRVZ5Y205eUtDZEJjbkpoZVNCTlpYUm9iMlJ6SUcxMWMzUWdZbVVnY0hKdmRtbGtaV1FnWVc0Z1FYSnlZWGtuS1R0Y2JuMDdYRzVjYmtWdWRXMWxjbUYwYjNJdWNISnZkRzkwZVhCbExsOWxiblZ0WlhKaGRHVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCc1pXNW5kR2dnUFNCMGFHbHpMbXhsYm1kMGFEdGNiaUFnZG1GeUlGOXBibkIxZENBOUlIUm9hWE11WDJsdWNIVjBPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCMGFHbHpMbDl6ZEdGMFpTQTlQVDBnVUVWT1JFbE9SeUFtSmlCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0IwYUdsekxsOWxZV05vUlc1MGNua29YMmx1Y0hWMFcybGRMQ0JwS1R0Y2JpQWdmVnh1ZlR0Y2JseHVSVzUxYldWeVlYUnZjaTV3Y205MGIzUjVjR1V1WDJWaFkyaEZiblJ5ZVNBOUlHWjFibU4wYVc5dUlDaGxiblJ5ZVN3Z2FTa2dlMXh1SUNCMllYSWdZeUE5SUhSb2FYTXVYMmx1YzNSaGJtTmxRMjl1YzNSeWRXTjBiM0k3WEc0Z0lIWmhjaUJ5WlhOdmJIWmxKQ1FnUFNCakxuSmxjMjlzZG1VN1hHNWNiaUFnYVdZZ0tISmxjMjlzZG1Va0pDQTlQVDBnY21WemIyeDJaU2tnZTF4dUlDQWdJSFpoY2lCZmRHaGxiaUE5SUdkbGRGUm9aVzRvWlc1MGNua3BPMXh1WEc0Z0lDQWdhV1lnS0Y5MGFHVnVJRDA5UFNCMGFHVnVJQ1ltSUdWdWRISjVMbDl6ZEdGMFpTQWhQVDBnVUVWT1JFbE9SeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZjMlYwZEd4bFpFRjBLR1Z1ZEhKNUxsOXpkR0YwWlN3Z2FTd2daVzUwY25rdVgzSmxjM1ZzZENrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnWDNSb1pXNGdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNKbGJXRnBibWx1WnkwdE8xeHVJQ0FnSUNBZ2RHaHBjeTVmY21WemRXeDBXMmxkSUQwZ1pXNTBjbms3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hqSUQwOVBTQlFjbTl0YVhObEtTQjdYRzRnSUNBZ0lDQjJZWElnY0hKdmJXbHpaU0E5SUc1bGR5QmpLRzV2YjNBcE8xeHVJQ0FnSUNBZ2FHRnVaR3hsVFdGNVltVlVhR1Z1WVdKc1pTaHdjbTl0YVhObExDQmxiblJ5ZVN3Z1gzUm9aVzRwTzF4dUlDQWdJQ0FnZEdocGN5NWZkMmxzYkZObGRIUnNaVUYwS0hCeWIyMXBjMlVzSUdrcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOTNhV3hzVTJWMGRHeGxRWFFvYm1WM0lHTW9ablZ1WTNScGIyNGdLSEpsYzI5c2RtVWtKQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemIyeDJaU1FrS0dWdWRISjVLVHRjYmlBZ0lDQWdJSDBwTENCcEtUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHBjeTVmZDJsc2JGTmxkSFJzWlVGMEtISmxjMjlzZG1Va0pDaGxiblJ5ZVNrc0lHa3BPMXh1SUNCOVhHNTlPMXh1WEc1RmJuVnRaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNWZjMlYwZEd4bFpFRjBJRDBnWm5WdVkzUnBiMjRnS0hOMFlYUmxMQ0JwTENCMllXeDFaU2tnZTF4dUlDQjJZWElnY0hKdmJXbHpaU0E5SUhSb2FYTXVjSEp2YldselpUdGNibHh1SUNCcFppQW9jSEp2YldselpTNWZjM1JoZEdVZ1BUMDlJRkJGVGtSSlRrY3BJSHRjYmlBZ0lDQjBhR2x6TGw5eVpXMWhhVzVwYm1jdExUdGNibHh1SUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnVWtWS1JVTlVSVVFwSUh0Y2JpQWdJQ0FnSUY5eVpXcGxZM1FvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbDl5WlhOMWJIUmJhVjBnUFNCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb2RHaHBjeTVmY21WdFlXbHVhVzVuSUQwOVBTQXdLU0I3WEc0Z0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQjBhR2x6TGw5eVpYTjFiSFFwTzF4dUlDQjlYRzU5TzF4dVhHNUZiblZ0WlhKaGRHOXlMbkJ5YjNSdmRIbHdaUzVmZDJsc2JGTmxkSFJzWlVGMElEMGdablZ1WTNScGIyNGdLSEJ5YjIxcGMyVXNJR2twSUh0Y2JpQWdkbUZ5SUdWdWRXMWxjbUYwYjNJZ1BTQjBhR2x6TzF4dVhHNGdJSE4xWW5OamNtbGlaU2h3Y205dGFYTmxMQ0IxYm1SbFptbHVaV1FzSUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxiblZ0WlhKaGRHOXlMbDl6WlhSMGJHVmtRWFFvUmxWTVJrbE1URVZFTENCcExDQjJZV3gxWlNrN1hHNGdJSDBzSUdaMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaVzUxYldWeVlYUnZjaTVmYzJWMGRHeGxaRUYwS0ZKRlNrVkRWRVZFTENCcExDQnlaV0Z6YjI0cE8xeHVJQ0I5S1R0Y2JuMDdYRzVjYmk4cUtseHVJQ0JnVUhKdmJXbHpaUzVoYkd4Z0lHRmpZMlZ3ZEhNZ1lXNGdZWEp5WVhrZ2IyWWdjSEp2YldselpYTXNJR0Z1WkNCeVpYUjFjbTV6SUdFZ2JtVjNJSEJ5YjIxcGMyVWdkMmhwWTJoY2JpQWdhWE1nWm5Wc1ptbHNiR1ZrSUhkcGRHZ2dZVzRnWVhKeVlYa2diMllnWm5Wc1ptbHNiRzFsYm5RZ2RtRnNkV1Z6SUdadmNpQjBhR1VnY0dGemMyVmtJSEJ5YjIxcGMyVnpMQ0J2Y2x4dUlDQnlaV3BsWTNSbFpDQjNhWFJvSUhSb1pTQnlaV0Z6YjI0Z2IyWWdkR2hsSUdacGNuTjBJSEJoYzNObFpDQndjbTl0YVhObElIUnZJR0psSUhKbGFtVmpkR1ZrTGlCSmRDQmpZWE4wY3lCaGJHeGNiaUFnWld4bGJXVnVkSE1nYjJZZ2RHaGxJSEJoYzNObFpDQnBkR1Z5WVdKc1pTQjBieUJ3Y205dGFYTmxjeUJoY3lCcGRDQnlkVzV6SUhSb2FYTWdZV3huYjNKcGRHaHRMbHh1WEc0Z0lFVjRZVzF3YkdVNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlRFZ1BTQnlaWE52YkhabEtERXBPMXh1SUNCc1pYUWdjSEp2YldselpUSWdQU0J5WlhOdmJIWmxLRElwTzF4dUlDQnNaWFFnY0hKdmJXbHpaVE1nUFNCeVpYTnZiSFpsS0RNcE8xeHVJQ0JzWlhRZ2NISnZiV2x6WlhNZ1BTQmJJSEJ5YjIxcGMyVXhMQ0J3Y205dGFYTmxNaXdnY0hKdmJXbHpaVE1nWFR0Y2JseHVJQ0JRY205dGFYTmxMbUZzYkNod2NtOXRhWE5sY3lrdWRHaGxiaWhtZFc1amRHbHZiaWhoY25KaGVTbDdYRzRnSUNBZ0x5OGdWR2hsSUdGeWNtRjVJR2hsY21VZ2QyOTFiR1FnWW1VZ1d5QXhMQ0F5TENBeklGMDdYRzRnSUgwcE8xeHVJQ0JnWUdCY2JseHVJQ0JKWmlCaGJua2diMllnZEdobElHQndjbTl0YVhObGMyQWdaMmwyWlc0Z2RHOGdZR0ZzYkdBZ1lYSmxJSEpsYW1WamRHVmtMQ0IwYUdVZ1ptbHljM1FnY0hKdmJXbHpaVnh1SUNCMGFHRjBJR2x6SUhKbGFtVmpkR1ZrSUhkcGJHd2dZbVVnWjJsMlpXNGdZWE1nWVc0Z1lYSm5kVzFsYm5RZ2RHOGdkR2hsSUhKbGRIVnlibVZrSUhCeWIyMXBjMlZ6SjNOY2JpQWdjbVZxWldOMGFXOXVJR2hoYm1Sc1pYSXVJRVp2Y2lCbGVHRnRjR3hsT2x4dVhHNGdJRVY0WVcxd2JHVTZYRzVjYmlBZ1lHQmdhbUYyWVhOamNtbHdkRnh1SUNCc1pYUWdjSEp2YldselpURWdQU0J5WlhOdmJIWmxLREVwTzF4dUlDQnNaWFFnY0hKdmJXbHpaVElnUFNCeVpXcGxZM1FvYm1WM0lFVnljbTl5S0Z3aU1sd2lLU2s3WEc0Z0lHeGxkQ0J3Y205dGFYTmxNeUE5SUhKbGFtVmpkQ2h1WlhjZ1JYSnliM0lvWENJelhDSXBLVHRjYmlBZ2JHVjBJSEJ5YjIxcGMyVnpJRDBnV3lCd2NtOXRhWE5sTVN3Z2NISnZiV2x6WlRJc0lIQnliMjFwYzJVeklGMDdYRzVjYmlBZ1VISnZiV2x6WlM1aGJHd29jSEp2YldselpYTXBMblJvWlc0b1puVnVZM1JwYjI0b1lYSnlZWGtwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCdVpYWmxjaUJ5ZFc1eklHSmxZMkYxYzJVZ2RHaGxjbVVnWVhKbElISmxhbVZqZEdWa0lIQnliMjFwYzJWeklWeHVJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdJQzh2SUdWeWNtOXlMbTFsYzNOaFoyVWdQVDA5SUZ3aU1sd2lYRzRnSUgwcE8xeHVJQ0JnWUdCY2JseHVJQ0JBYldWMGFHOWtJR0ZzYkZ4dUlDQkFjM1JoZEdsalhHNGdJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHVnVkSEpwWlhNZ1lYSnlZWGtnYjJZZ2NISnZiV2x6WlhOY2JpQWdRSEJoY21GdElIdFRkSEpwYm1kOUlHeGhZbVZzSUc5d2RHbHZibUZzSUhOMGNtbHVaeUJtYjNJZ2JHRmlaV3hwYm1jZ2RHaGxJSEJ5YjIxcGMyVXVYRzRnSUZWelpXWjFiQ0JtYjNJZ2RHOXZiR2x1Wnk1Y2JpQWdRSEpsZEhWeWJpQjdVSEp2YldselpYMGdjSEp2YldselpTQjBhR0YwSUdseklHWjFiR1pwYkd4bFpDQjNhR1Z1SUdGc2JDQmdjSEp2YldselpYTmdJR2hoZG1VZ1ltVmxibHh1SUNCbWRXeG1hV3hzWldRc0lHOXlJSEpsYW1WamRHVmtJR2xtSUdGdWVTQnZaaUIwYUdWdElHSmxZMjl0WlNCeVpXcGxZM1JsWkM1Y2JpQWdRSE4wWVhScFkxeHVLaTljYm1aMWJtTjBhVzl1SUdGc2JDaGxiblJ5YVdWektTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1JXNTFiV1Z5WVhSdmNpaDBhR2x6TENCbGJuUnlhV1Z6S1M1d2NtOXRhWE5sTzF4dWZWeHVYRzR2S2lwY2JpQWdZRkJ5YjIxcGMyVXVjbUZqWldBZ2NtVjBkWEp1Y3lCaElHNWxkeUJ3Y205dGFYTmxJSGRvYVdOb0lHbHpJSE5sZEhSc1pXUWdhVzRnZEdobElITmhiV1VnZDJGNUlHRnpJSFJvWlZ4dUlDQm1hWEp6ZENCd1lYTnpaV1FnY0hKdmJXbHpaU0IwYnlCelpYUjBiR1V1WEc1Y2JpQWdSWGhoYlhCc1pUcGNibHh1SUNCZ1lHQnFZWFpoYzJOeWFYQjBYRzRnSUd4bGRDQndjbTl0YVhObE1TQTlJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2w3WEc0Z0lDQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnY21WemIyeDJaU2duY0hKdmJXbHpaU0F4SnlrN1hHNGdJQ0FnZlN3Z01qQXdLVHRjYmlBZ2ZTazdYRzVjYmlBZ2JHVjBJSEJ5YjIxcGMyVXlJRDBnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1h0Y2JpQWdJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCeVpYTnZiSFpsS0Nkd2NtOXRhWE5sSURJbktUdGNiaUFnSUNCOUxDQXhNREFwTzF4dUlDQjlLVHRjYmx4dUlDQlFjbTl0YVhObExuSmhZMlVvVzNCeWIyMXBjMlV4TENCd2NtOXRhWE5sTWwwcExuUm9aVzRvWm5WdVkzUnBiMjRvY21WemRXeDBLWHRjYmlBZ0lDQXZMeUJ5WlhOMWJIUWdQVDA5SUNkd2NtOXRhWE5sSURJbklHSmxZMkYxYzJVZ2FYUWdkMkZ6SUhKbGMyOXNkbVZrSUdKbFptOXlaU0J3Y205dGFYTmxNVnh1SUNBZ0lDOHZJSGRoY3lCeVpYTnZiSFpsWkM1Y2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lHQlFjbTl0YVhObExuSmhZMlZnSUdseklHUmxkR1Z5YldsdWFYTjBhV01nYVc0Z2RHaGhkQ0J2Ym14NUlIUm9aU0J6ZEdGMFpTQnZaaUIwYUdVZ1ptbHljM1JjYmlBZ2MyVjBkR3hsWkNCd2NtOXRhWE5sSUcxaGRIUmxjbk11SUVadmNpQmxlR0Z0Y0d4bExDQmxkbVZ1SUdsbUlHOTBhR1Z5SUhCeWIyMXBjMlZ6SUdkcGRtVnVJSFJ2SUhSb1pWeHVJQ0JnY0hKdmJXbHpaWE5nSUdGeWNtRjVJR0Z5WjNWdFpXNTBJR0Z5WlNCeVpYTnZiSFpsWkN3Z1luVjBJSFJvWlNCbWFYSnpkQ0J6WlhSMGJHVmtJSEJ5YjIxcGMyVWdhR0Z6WEc0Z0lHSmxZMjl0WlNCeVpXcGxZM1JsWkNCaVpXWnZjbVVnZEdobElHOTBhR1Z5SUhCeWIyMXBjMlZ6SUdKbFkyRnRaU0JtZFd4bWFXeHNaV1FzSUhSb1pTQnlaWFIxY201bFpGeHVJQ0J3Y205dGFYTmxJSGRwYkd3Z1ltVmpiMjFsSUhKbGFtVmpkR1ZrT2x4dVhHNGdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdiR1YwSUhCeWIyMXBjMlV4SUQwZ2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtYdGNiaUFnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnlaWE52YkhabEtDZHdjbTl0YVhObElERW5LVHRjYmlBZ0lDQjlMQ0F5TURBcE8xeHVJQ0I5S1R0Y2JseHVJQ0JzWlhRZ2NISnZiV2x6WlRJZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBlMXh1SUNBZ0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9KM0J5YjIxcGMyVWdNaWNwS1R0Y2JpQWdJQ0I5TENBeE1EQXBPMXh1SUNCOUtUdGNibHh1SUNCUWNtOXRhWE5sTG5KaFkyVW9XM0J5YjIxcGMyVXhMQ0J3Y205dGFYTmxNbDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6ZFd4MEtYdGNiaUFnSUNBdkx5QkRiMlJsSUdobGNtVWdibVYyWlhJZ2NuVnVjMXh1SUNCOUxDQm1kVzVqZEdsdmJpaHlaV0Z6YjI0cGUxeHVJQ0FnSUM4dklISmxZWE52Ymk1dFpYTnpZV2RsSUQwOVBTQW5jSEp2YldselpTQXlKeUJpWldOaGRYTmxJSEJ5YjIxcGMyVWdNaUJpWldOaGJXVWdjbVZxWldOMFpXUWdZbVZtYjNKbFhHNGdJQ0FnTHk4Z2NISnZiV2x6WlNBeElHSmxZMkZ0WlNCbWRXeG1hV3hzWldSY2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFRnVJR1Y0WVcxd2JHVWdjbVZoYkMxM2IzSnNaQ0IxYzJVZ1kyRnpaU0JwY3lCcGJYQnNaVzFsYm5ScGJtY2dkR2x0Wlc5MWRITTZYRzVjYmlBZ1lHQmdhbUYyWVhOamNtbHdkRnh1SUNCUWNtOXRhWE5sTG5KaFkyVW9XMkZxWVhnb0oyWnZieTVxYzI5dUp5a3NJSFJwYldWdmRYUW9OVEF3TUNsZEtWeHVJQ0JnWUdCY2JseHVJQ0JBYldWMGFHOWtJSEpoWTJWY2JpQWdRSE4wWVhScFkxeHVJQ0JBY0dGeVlXMGdlMEZ5Y21GNWZTQndjbTl0YVhObGN5QmhjbkpoZVNCdlppQndjbTl0YVhObGN5QjBieUJ2WW5ObGNuWmxYRzRnSUZWelpXWjFiQ0JtYjNJZ2RHOXZiR2x1Wnk1Y2JpQWdRSEpsZEhWeWJpQjdVSEp2YldselpYMGdZU0J3Y205dGFYTmxJSGRvYVdOb0lITmxkSFJzWlhNZ2FXNGdkR2hsSUhOaGJXVWdkMkY1SUdGeklIUm9aU0JtYVhKemRDQndZWE56WldSY2JpQWdjSEp2YldselpTQjBieUJ6WlhSMGJHVXVYRzRxTDF4dVpuVnVZM1JwYjI0Z2NtRmpaU2hsYm5SeWFXVnpLU0I3WEc0Z0lDOHFhbk5vYVc1MElIWmhiR2xrZEdocGN6cDBjblZsSUNvdlhHNGdJSFpoY2lCRGIyNXpkSEoxWTNSdmNpQTlJSFJvYVhNN1hHNWNiaUFnYVdZZ0tDRnBjMEZ5Y21GNUtHVnVkSEpwWlhNcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWhtZFc1amRHbHZiaUFvWHl3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBLRzVsZHlCVWVYQmxSWEp5YjNJb0oxbHZkU0J0ZFhOMElIQmhjM01nWVc0Z1lYSnlZWGtnZEc4Z2NtRmpaUzRuS1NrN1hHNGdJQ0FnZlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWhtZFc1amRHbHZiaUFvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1pXNTBjbWxsY3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJRU52Ym5OMGNuVmpkRzl5TG5KbGMyOXNkbVVvWlc1MGNtbGxjMXRwWFNrdWRHaGxiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ0JnVUhKdmJXbHpaUzV5WldwbFkzUmdJSEpsZEhWeWJuTWdZU0J3Y205dGFYTmxJSEpsYW1WamRHVmtJSGRwZEdnZ2RHaGxJSEJoYzNObFpDQmdjbVZoYzI5dVlDNWNiaUFnU1hRZ2FYTWdjMmh2Y25Sb1lXNWtJR1p2Y2lCMGFHVWdabTlzYkc5M2FXNW5PbHh1WEc0Z0lHQmdZR3BoZG1GelkzSnBjSFJjYmlBZ2JHVjBJSEJ5YjIxcGMyVWdQU0J1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwZTF4dUlDQWdJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9KMWRJVDA5UVV5Y3BLVHRjYmlBZ2ZTazdYRzVjYmlBZ2NISnZiV2x6WlM1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnSUNBdkx5QkRiMlJsSUdobGNtVWdaRzlsYzI0bmRDQnlkVzRnWW1WallYVnpaU0IwYUdVZ2NISnZiV2x6WlNCcGN5QnlaV3BsWTNSbFpDRmNiaUFnZlN3Z1puVnVZM1JwYjI0b2NtVmhjMjl1S1h0Y2JpQWdJQ0F2THlCeVpXRnpiMjR1YldWemMyRm5aU0E5UFQwZ0oxZElUMDlRVXlkY2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFbHVjM1JsWVdRZ2IyWWdkM0pwZEdsdVp5QjBhR1VnWVdKdmRtVXNJSGx2ZFhJZ1kyOWtaU0J1YjNjZ2MybHRjR3g1SUdKbFkyOXRaWE1nZEdobElHWnZiR3h2ZDJsdVp6cGNibHh1SUNCZ1lHQnFZWFpoYzJOeWFYQjBYRzRnSUd4bGRDQndjbTl0YVhObElEMGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZFhTRTlQVUZNbktTazdYRzVjYmlBZ2NISnZiV2x6WlM1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnSUNBdkx5QkRiMlJsSUdobGNtVWdaRzlsYzI0bmRDQnlkVzRnWW1WallYVnpaU0IwYUdVZ2NISnZiV2x6WlNCcGN5QnlaV3BsWTNSbFpDRmNiaUFnZlN3Z1puVnVZM1JwYjI0b2NtVmhjMjl1S1h0Y2JpQWdJQ0F2THlCeVpXRnpiMjR1YldWemMyRm5aU0E5UFQwZ0oxZElUMDlRVXlkY2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFQnRaWFJvYjJRZ2NtVnFaV04wWEc0Z0lFQnpkR0YwYVdOY2JpQWdRSEJoY21GdElIdEJibmw5SUhKbFlYTnZiaUIyWVd4MVpTQjBhR0YwSUhSb1pTQnlaWFIxY201bFpDQndjbTl0YVhObElIZHBiR3dnWW1VZ2NtVnFaV04wWldRZ2QybDBhQzVjYmlBZ1ZYTmxablZzSUdadmNpQjBiMjlzYVc1bkxseHVJQ0JBY21WMGRYSnVJSHRRY205dGFYTmxmU0JoSUhCeWIyMXBjMlVnY21WcVpXTjBaV1FnZDJsMGFDQjBhR1VnWjJsMlpXNGdZSEpsWVhOdmJtQXVYRzRxTDF4dVpuVnVZM1JwYjI0Z2NtVnFaV04wS0hKbFlYTnZiaWtnZTF4dUlDQXZLbXB6YUdsdWRDQjJZV3hwWkhSb2FYTTZkSEoxWlNBcUwxeHVJQ0IyWVhJZ1EyOXVjM1J5ZFdOMGIzSWdQU0IwYUdsek8xeHVJQ0IyWVhJZ2NISnZiV2x6WlNBOUlHNWxkeUJEYjI1emRISjFZM1J2Y2lodWIyOXdLVHRjYmlBZ1gzSmxhbVZqZENod2NtOXRhWE5sTENCeVpXRnpiMjRwTzF4dUlDQnlaWFIxY200Z2NISnZiV2x6WlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYm1WbFpITlNaWE52YkhabGNpZ3BJSHRjYmlBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25XVzkxSUcxMWMzUWdjR0Z6Y3lCaElISmxjMjlzZG1WeUlHWjFibU4wYVc5dUlHRnpJSFJvWlNCbWFYSnpkQ0JoY21kMWJXVnVkQ0IwYnlCMGFHVWdjSEp2YldselpTQmpiMjV6ZEhKMVkzUnZjaWNwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ1WldWa2MwNWxkeWdwSUh0Y2JpQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtaaGFXeGxaQ0IwYnlCamIyNXpkSEoxWTNRZ0oxQnliMjFwYzJVbk9pQlFiR1ZoYzJVZ2RYTmxJSFJvWlNBbmJtVjNKeUJ2Y0dWeVlYUnZjaXdnZEdocGN5QnZZbXBsWTNRZ1kyOXVjM1J5ZFdOMGIzSWdZMkZ1Ym05MElHSmxJR05oYkd4bFpDQmhjeUJoSUdaMWJtTjBhVzl1TGx3aUtUdGNibjFjYmx4dUx5b3FYRzRnSUZCeWIyMXBjMlVnYjJKcVpXTjBjeUJ5WlhCeVpYTmxiblFnZEdobElHVjJaVzUwZFdGc0lISmxjM1ZzZENCdlppQmhiaUJoYzNsdVkyaHliMjV2ZFhNZ2IzQmxjbUYwYVc5dUxpQlVhR1ZjYmlBZ2NISnBiV0Z5ZVNCM1lYa2diMllnYVc1MFpYSmhZM1JwYm1jZ2QybDBhQ0JoSUhCeWIyMXBjMlVnYVhNZ2RHaHliM1ZuYUNCcGRITWdZSFJvWlc1Z0lHMWxkR2h2WkN3Z2QyaHBZMmhjYmlBZ2NtVm5hWE4wWlhKeklHTmhiR3hpWVdOcmN5QjBieUJ5WldObGFYWmxJR1ZwZEdobGNpQmhJSEJ5YjIxcGMyVW5jeUJsZG1WdWRIVmhiQ0IyWVd4MVpTQnZjaUIwYUdVZ2NtVmhjMjl1WEc0Z0lIZG9lU0IwYUdVZ2NISnZiV2x6WlNCallXNXViM1FnWW1VZ1puVnNabWxzYkdWa0xseHVYRzRnSUZSbGNtMXBibTlzYjJkNVhHNGdJQzB0TFMwdExTMHRMUzB0WEc1Y2JpQWdMU0JnY0hKdmJXbHpaV0FnYVhNZ1lXNGdiMkpxWldOMElHOXlJR1oxYm1OMGFXOXVJSGRwZEdnZ1lTQmdkR2hsYm1BZ2JXVjBhRzlrSUhkb2IzTmxJR0psYUdGMmFXOXlJR052Ym1admNtMXpJSFJ2SUhSb2FYTWdjM0JsWTJsbWFXTmhkR2x2Ymk1Y2JpQWdMU0JnZEdobGJtRmliR1ZnSUdseklHRnVJRzlpYW1WamRDQnZjaUJtZFc1amRHbHZiaUIwYUdGMElHUmxabWx1WlhNZ1lTQmdkR2hsYm1BZ2JXVjBhRzlrTGx4dUlDQXRJR0IyWVd4MVpXQWdhWE1nWVc1NUlHeGxaMkZzSUVwaGRtRlRZM0pwY0hRZ2RtRnNkV1VnS0dsdVkyeDFaR2x1WnlCMWJtUmxabWx1WldRc0lHRWdkR2hsYm1GaWJHVXNJRzl5SUdFZ2NISnZiV2x6WlNrdVhHNGdJQzBnWUdWNFkyVndkR2x2Ym1BZ2FYTWdZU0IyWVd4MVpTQjBhR0YwSUdseklIUm9jbTkzYmlCMWMybHVaeUIwYUdVZ2RHaHliM2NnYzNSaGRHVnRaVzUwTGx4dUlDQXRJR0J5WldGemIyNWdJR2x6SUdFZ2RtRnNkV1VnZEdoaGRDQnBibVJwWTJGMFpYTWdkMmg1SUdFZ2NISnZiV2x6WlNCM1lYTWdjbVZxWldOMFpXUXVYRzRnSUMwZ1lITmxkSFJzWldSZ0lIUm9aU0JtYVc1aGJDQnlaWE4wYVc1bklITjBZWFJsSUc5bUlHRWdjSEp2YldselpTd2dablZzWm1sc2JHVmtJRzl5SUhKbGFtVmpkR1ZrTGx4dVhHNGdJRUVnY0hKdmJXbHpaU0JqWVc0Z1ltVWdhVzRnYjI1bElHOW1JSFJvY21WbElITjBZWFJsY3pvZ2NHVnVaR2x1Wnl3Z1puVnNabWxzYkdWa0xDQnZjaUJ5WldwbFkzUmxaQzVjYmx4dUlDQlFjbTl0YVhObGN5QjBhR0YwSUdGeVpTQm1kV3htYVd4c1pXUWdhR0YyWlNCaElHWjFiR1pwYkd4dFpXNTBJSFpoYkhWbElHRnVaQ0JoY21VZ2FXNGdkR2hsSUdaMWJHWnBiR3hsWkZ4dUlDQnpkR0YwWlM0Z0lGQnliMjFwYzJWeklIUm9ZWFFnWVhKbElISmxhbVZqZEdWa0lHaGhkbVVnWVNCeVpXcGxZM1JwYjI0Z2NtVmhjMjl1SUdGdVpDQmhjbVVnYVc0Z2RHaGxYRzRnSUhKbGFtVmpkR1ZrSUhOMFlYUmxMaUFnUVNCbWRXeG1hV3hzYldWdWRDQjJZV3gxWlNCcGN5QnVaWFpsY2lCaElIUm9aVzVoWW14bExseHVYRzRnSUZCeWIyMXBjMlZ6SUdOaGJpQmhiSE52SUdKbElITmhhV1FnZEc4Z0tuSmxjMjlzZG1VcUlHRWdkbUZzZFdVdUlDQkpaaUIwYUdseklIWmhiSFZsSUdseklHRnNjMjhnWVZ4dUlDQndjbTl0YVhObExDQjBhR1Z1SUhSb1pTQnZjbWxuYVc1aGJDQndjbTl0YVhObEozTWdjMlYwZEd4bFpDQnpkR0YwWlNCM2FXeHNJRzFoZEdOb0lIUm9aU0IyWVd4MVpTZHpYRzRnSUhObGRIUnNaV1FnYzNSaGRHVXVJQ0JUYnlCaElIQnliMjFwYzJVZ2RHaGhkQ0FxY21WemIyeDJaWE1xSUdFZ2NISnZiV2x6WlNCMGFHRjBJSEpsYW1WamRITWdkMmxzYkZ4dUlDQnBkSE5sYkdZZ2NtVnFaV04wTENCaGJtUWdZU0J3Y205dGFYTmxJSFJvWVhRZ0tuSmxjMjlzZG1WektpQmhJSEJ5YjIxcGMyVWdkR2hoZENCbWRXeG1hV3hzY3lCM2FXeHNYRzRnSUdsMGMyVnNaaUJtZFd4bWFXeHNMbHh1WEc1Y2JpQWdRbUZ6YVdNZ1ZYTmhaMlU2WEc0Z0lDMHRMUzB0TFMwdExTMHRMVnh1WEc0Z0lHQmdZR3B6WEc0Z0lHeGxkQ0J3Y205dGFYTmxJRDBnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnTHk4Z2IyNGdjM1ZqWTJWemMxeHVJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBPMXh1WEc0Z0lDQWdMeThnYjI0Z1ptRnBiSFZ5WlZ4dUlDQWdJSEpsYW1WamRDaHlaV0Z6YjI0cE8xeHVJQ0I5S1R0Y2JseHVJQ0J3Y205dGFYTmxMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0F2THlCdmJpQm1kV3htYVd4c2JXVnVkRnh1SUNCOUxDQm1kVzVqZEdsdmJpaHlaV0Z6YjI0cElIdGNiaUFnSUNBdkx5QnZiaUJ5WldwbFkzUnBiMjVjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVGa2RtRnVZMlZrSUZWellXZGxPbHh1SUNBdExTMHRMUzB0TFMwdExTMHRMUzFjYmx4dUlDQlFjbTl0YVhObGN5QnphR2x1WlNCM2FHVnVJR0ZpYzNSeVlXTjBhVzVuSUdGM1lYa2dZWE41Ym1Ob2NtOXViM1Z6SUdsdWRHVnlZV04wYVc5dWN5QnpkV05vSUdGelhHNGdJR0JZVFV4SWRIUndVbVZ4ZFdWemRHQnpMbHh1WEc0Z0lHQmdZR3B6WEc0Z0lHWjFibU4wYVc5dUlHZGxkRXBUVDA0b2RYSnNLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDbDdYRzRnSUNBZ0lDQnNaWFFnZUdoeUlEMGdibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2s3WEc1Y2JpQWdJQ0FnSUhob2NpNXZjR1Z1S0NkSFJWUW5MQ0IxY213cE8xeHVJQ0FnSUNBZ2VHaHlMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUdoaGJtUnNaWEk3WEc0Z0lDQWdJQ0I0YUhJdWNtVnpjRzl1YzJWVWVYQmxJRDBnSjJwemIyNG5PMXh1SUNBZ0lDQWdlR2h5TG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvSjBGalkyVndkQ2NzSUNkaGNIQnNhV05oZEdsdmJpOXFjMjl1SnlrN1hHNGdJQ0FnSUNCNGFISXVjMlZ1WkNncE8xeHVYRzRnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5WldGa2VWTjBZWFJsSUQwOVBTQjBhR2x6TGtSUFRrVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRHRjBkWE1nUFQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDBhR2x6TG5KbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLRzVsZHlCRmNuSnZjaWduWjJWMFNsTlBUam9nWUNjZ0t5QjFjbXdnS3lBbllDQm1ZV2xzWldRZ2QybDBhQ0J6ZEdGMGRYTTZJRnNuSUNzZ2RHaHBjeTV6ZEdGMGRYTWdLeUFuWFNjcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQm5aWFJLVTA5T0tDY3ZjRzl6ZEhNdWFuTnZiaWNwTG5Sb1pXNG9ablZ1WTNScGIyNG9hbk52YmlrZ2UxeHVJQ0FnSUM4dklHOXVJR1oxYkdacGJHeHRaVzUwWEc0Z0lIMHNJR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDOHZJRzl1SUhKbGFtVmpkR2x2Ymx4dUlDQjlLVHRjYmlBZ1lHQmdYRzVjYmlBZ1ZXNXNhV3RsSUdOaGJHeGlZV05yY3l3Z2NISnZiV2x6WlhNZ1lYSmxJR2R5WldGMElHTnZiWEJ2YzJGaWJHVWdjSEpwYldsMGFYWmxjeTVjYmx4dUlDQmdZR0JxYzF4dUlDQlFjbTl0YVhObExtRnNiQ2hiWEc0Z0lDQWdaMlYwU2xOUFRpZ25MM0J2YzNSekp5a3NYRzRnSUNBZ1oyVjBTbE5QVGlnbkwyTnZiVzFsYm5Sekp5bGNiaUFnWFNrdWRHaGxiaWhtZFc1amRHbHZiaWgyWVd4MVpYTXBlMXh1SUNBZ0lIWmhiSFZsYzFzd1hTQXZMeUE5UGlCd2IzTjBjMHBUVDA1Y2JpQWdJQ0IyWVd4MVpYTmJNVjBnTHk4Z1BUNGdZMjl0YldWdWRITktVMDlPWEc1Y2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdWek8xeHVJQ0I5S1R0Y2JpQWdZR0JnWEc1Y2JpQWdRR05zWVhOeklGQnliMjFwYzJWY2JpQWdRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdjbVZ6YjJ4MlpYSmNiaUFnVlhObFpuVnNJR1p2Y2lCMGIyOXNhVzVuTGx4dUlDQkFZMjl1YzNSeWRXTjBiM0pjYmlvdlhHNW1kVzVqZEdsdmJpQlFjbTl0YVhObEtISmxjMjlzZG1WeUtTQjdYRzRnSUhSb2FYTmJVRkpQVFVsVFJWOUpSRjBnUFNCdVpYaDBTV1FvS1R0Y2JpQWdkR2hwY3k1ZmNtVnpkV3gwSUQwZ2RHaHBjeTVmYzNSaGRHVWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lIUm9hWE11WDNOMVluTmpjbWxpWlhKeklEMGdXMTA3WEc1Y2JpQWdhV1lnS0c1dmIzQWdJVDA5SUhKbGMyOXNkbVZ5S1NCN1hHNGdJQ0FnZEhsd1pXOW1JSEpsYzI5c2RtVnlJQ0U5UFNBblpuVnVZM1JwYjI0bklDWW1JRzVsWldSelVtVnpiMngyWlhJb0tUdGNiaUFnSUNCMGFHbHpJR2x1YzNSaGJtTmxiMllnVUhKdmJXbHpaU0EvSUdsdWFYUnBZV3hwZW1WUWNtOXRhWE5sS0hSb2FYTXNJSEpsYzI5c2RtVnlLU0E2SUc1bFpXUnpUbVYzS0NrN1hHNGdJSDFjYm4xY2JseHVVSEp2YldselpTNWhiR3dnUFNCaGJHdzdYRzVRY205dGFYTmxMbkpoWTJVZ1BTQnlZV05sTzF4dVVISnZiV2x6WlM1eVpYTnZiSFpsSUQwZ2NtVnpiMngyWlR0Y2JsQnliMjFwYzJVdWNtVnFaV04wSUQwZ2NtVnFaV04wTzF4dVVISnZiV2x6WlM1ZmMyVjBVMk5vWldSMWJHVnlJRDBnYzJWMFUyTm9aV1IxYkdWeU8xeHVVSEp2YldselpTNWZjMlYwUVhOaGNDQTlJSE5sZEVGellYQTdYRzVRY205dGFYTmxMbDloYzJGd0lEMGdZWE5oY0R0Y2JseHVVSEp2YldselpTNXdjbTkwYjNSNWNHVWdQU0I3WEc0Z0lHTnZibk4wY25WamRHOXlPaUJRY205dGFYTmxMRnh1WEc0Z0lDOHFLbHh1SUNBZ0lGUm9aU0J3Y21sdFlYSjVJSGRoZVNCdlppQnBiblJsY21GamRHbHVaeUIzYVhSb0lHRWdjSEp2YldselpTQnBjeUIwYUhKdmRXZG9JR2wwY3lCZ2RHaGxibUFnYldWMGFHOWtMRnh1SUNBZ0lIZG9hV05vSUhKbFoybHpkR1Z5Y3lCallXeHNZbUZqYTNNZ2RHOGdjbVZqWldsMlpTQmxhWFJvWlhJZ1lTQndjbTl0YVhObEozTWdaWFpsYm5SMVlXd2dkbUZzZFdVZ2IzSWdkR2hsWEc0Z0lDQWdjbVZoYzI5dUlIZG9lU0IwYUdVZ2NISnZiV2x6WlNCallXNXViM1FnWW1VZ1puVnNabWxzYkdWa0xseHVJQ0JjYmlBZ0lDQmdZR0JxYzF4dUlDQWdJR1pwYm1SVmMyVnlLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaDFjMlZ5S1h0Y2JpQWdJQ0FnSUM4dklIVnpaWElnYVhNZ1lYWmhhV3hoWW14bFhHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0b2NtVmhjMjl1S1h0Y2JpQWdJQ0FnSUM4dklIVnpaWElnYVhNZ2RXNWhkbUZwYkdGaWJHVXNJR0Z1WkNCNWIzVWdZWEpsSUdkcGRtVnVJSFJvWlNCeVpXRnpiMjRnZDJoNVhHNGdJQ0FnZlNrN1hHNGdJQ0FnWUdCZ1hHNGdJRnh1SUNBZ0lFTm9ZV2x1YVc1blhHNGdJQ0FnTFMwdExTMHRMUzFjYmlBZ1hHNGdJQ0FnVkdobElISmxkSFZ5YmlCMllXeDFaU0J2WmlCZ2RHaGxibUFnYVhNZ2FYUnpaV3htSUdFZ2NISnZiV2x6WlM0Z0lGUm9hWE1nYzJWamIyNWtMQ0FuWkc5M2JuTjBjbVZoYlNkY2JpQWdJQ0J3Y205dGFYTmxJR2x6SUhKbGMyOXNkbVZrSUhkcGRHZ2dkR2hsSUhKbGRIVnliaUIyWVd4MVpTQnZaaUIwYUdVZ1ptbHljM1FnY0hKdmJXbHpaU2R6SUdaMWJHWnBiR3h0Wlc1MFhHNGdJQ0FnYjNJZ2NtVnFaV04wYVc5dUlHaGhibVJzWlhJc0lHOXlJSEpsYW1WamRHVmtJR2xtSUhSb1pTQm9ZVzVrYkdWeUlIUm9jbTkzY3lCaGJpQmxlR05sY0hScGIyNHVYRzRnSUZ4dUlDQWdJR0JnWUdwelhHNGdJQ0FnWm1sdVpGVnpaWElvS1M1MGFHVnVLR1oxYm1OMGFXOXVJQ2gxYzJWeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RYTmxjaTV1WVcxbE8xeHVJQ0FnSUgwc0lHWjFibU4wYVc5dUlDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBblpHVm1ZWFZzZENCdVlXMWxKenRjYmlBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaDFjMlZ5VG1GdFpTa2dlMXh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJWYzJWeVlDQm1kV3htYVd4c1pXUXNJR0IxYzJWeVRtRnRaV0FnZDJsc2JDQmlaU0IwYUdVZ2RYTmxjaWR6SUc1aGJXVXNJRzkwYUdWeWQybHpaU0JwZEZ4dUlDQWdJQ0FnTHk4Z2QybHNiQ0JpWlNCZ0oyUmxabUYxYkhRZ2JtRnRaU2RnWEc0Z0lDQWdmU2s3WEc0Z0lGeHVJQ0FnSUdacGJtUlZjMlZ5S0NrdWRHaGxiaWhtZFc1amRHbHZiaUFvZFhObGNpa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEdiM1Z1WkNCMWMyVnlMQ0JpZFhRZ2MzUnBiR3dnZFc1b1lYQndlU2NwTzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWUdacGJtUlZjMlZ5WUNCeVpXcGxZM1JsWkNCaGJtUWdkMlVuY21VZ2RXNW9ZWEJ3ZVNjcE8xeHVJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0F2THlCdVpYWmxjaUJ5WldGamFHVmtYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdMeThnYVdZZ1lHWnBibVJWYzJWeVlDQm1kV3htYVd4c1pXUXNJR0J5WldGemIyNWdJSGRwYkd3Z1ltVWdKMFp2ZFc1a0lIVnpaWElzSUdKMWRDQnpkR2xzYkNCMWJtaGhjSEI1Snk1Y2JpQWdJQ0FnSUM4dklFbG1JR0JtYVc1a1ZYTmxjbUFnY21WcVpXTjBaV1FzSUdCeVpXRnpiMjVnSUhkcGJHd2dZbVVnSjJCbWFXNWtWWE5sY21BZ2NtVnFaV04wWldRZ1lXNWtJSGRsSjNKbElIVnVhR0Z3Y0hrbkxseHVJQ0FnSUgwcE8xeHVJQ0FnSUdCZ1lGeHVJQ0FnSUVsbUlIUm9aU0JrYjNkdWMzUnlaV0Z0SUhCeWIyMXBjMlVnWkc5bGN5QnViM1FnYzNCbFkybG1lU0JoSUhKbGFtVmpkR2x2YmlCb1lXNWtiR1Z5TENCeVpXcGxZM1JwYjI0Z2NtVmhjMjl1Y3lCM2FXeHNJR0psSUhCeWIzQmhaMkYwWldRZ1puVnlkR2hsY2lCa2IzZHVjM1J5WldGdExseHVJQ0JjYmlBZ0lDQmdZR0JxYzF4dUlDQWdJR1pwYm1SVmMyVnlLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGQmxaR0ZuYjJkcFkyRnNSWGhqWlhCMGFXOXVLQ2RWY0hOMGNtVmhiU0JsY25KdmNpY3BPMXh1SUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBdkx5QnVaWFpsY2lCeVpXRmphR1ZrWEc0Z0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDOHZJRzVsZG1WeUlISmxZV05vWldSY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBdkx5QlVhR1VnWUZCbFpHZGhaMjlqYVdGc1JYaGpaWEIwYVc5dVlDQnBjeUJ3Y205d1lXZGhkR1ZrSUdGc2JDQjBhR1VnZDJGNUlHUnZkMjRnZEc4Z2FHVnlaVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JCYzNOcGJXbHNZWFJwYjI1Y2JpQWdJQ0F0TFMwdExTMHRMUzB0TFMxY2JpQWdYRzRnSUNBZ1UyOXRaWFJwYldWeklIUm9aU0IyWVd4MVpTQjViM1VnZDJGdWRDQjBieUJ3Y205d1lXZGhkR1VnZEc4Z1lTQmtiM2R1YzNSeVpXRnRJSEJ5YjIxcGMyVWdZMkZ1SUc5dWJIa2dZbVZjYmlBZ0lDQnlaWFJ5YVdWMlpXUWdZWE41Ym1Ob2NtOXViM1Z6YkhrdUlGUm9hWE1nWTJGdUlHSmxJR0ZqYUdsbGRtVmtJR0o1SUhKbGRIVnlibWx1WnlCaElIQnliMjFwYzJVZ2FXNGdkR2hsWEc0Z0lDQWdablZzWm1sc2JHMWxiblFnYjNJZ2NtVnFaV04wYVc5dUlHaGhibVJzWlhJdUlGUm9aU0JrYjNkdWMzUnlaV0Z0SUhCeWIyMXBjMlVnZDJsc2JDQjBhR1Z1SUdKbElIQmxibVJwYm1kY2JpQWdJQ0IxYm5ScGJDQjBhR1VnY21WMGRYSnVaV1FnY0hKdmJXbHpaU0JwY3lCelpYUjBiR1ZrTGlCVWFHbHpJR2x6SUdOaGJHeGxaQ0FxWVhOemFXMXBiR0YwYVc5dUtpNWNiaUFnWEc0Z0lDQWdZR0JnYW5OY2JpQWdJQ0JtYVc1a1ZYTmxjaWdwTG5Sb1pXNG9ablZ1WTNScGIyNGdLSFZ6WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWFXNWtRMjl0YldWdWRITkNlVUYxZEdodmNpaDFjMlZ5S1R0Y2JpQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVJQ2hqYjIxdFpXNTBjeWtnZTF4dUlDQWdJQ0FnTHk4Z1ZHaGxJSFZ6WlhJbmN5QmpiMjF0Wlc1MGN5QmhjbVVnYm05M0lHRjJZV2xzWVdKc1pWeHVJQ0FnSUgwcE8xeHVJQ0FnSUdCZ1lGeHVJQ0JjYmlBZ0lDQkpaaUIwYUdVZ1lYTnphVzFzYVdGMFpXUWdjSEp2YldselpTQnlaV3BsWTNSekxDQjBhR1Z1SUhSb1pTQmtiM2R1YzNSeVpXRnRJSEJ5YjIxcGMyVWdkMmxzYkNCaGJITnZJSEpsYW1WamRDNWNiaUFnWEc0Z0lDQWdZR0JnYW5OY2JpQWdJQ0JtYVc1a1ZYTmxjaWdwTG5Sb1pXNG9ablZ1WTNScGIyNGdLSFZ6WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWFXNWtRMjl0YldWdWRITkNlVUYxZEdodmNpaDFjMlZ5S1R0Y2JpQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVJQ2hqYjIxdFpXNTBjeWtnZTF4dUlDQWdJQ0FnTHk4Z1NXWWdZR1pwYm1SRGIyMXRaVzUwYzBKNVFYVjBhRzl5WUNCbWRXeG1hV3hzY3l3Z2QyVW5iR3dnYUdGMlpTQjBhR1VnZG1Gc2RXVWdhR1Z5WlZ4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUM4dklFbG1JR0JtYVc1a1EyOXRiV1Z1ZEhOQ2VVRjFkR2h2Y21BZ2NtVnFaV04wY3l3Z2QyVW5iR3dnYUdGMlpTQjBhR1VnY21WaGMyOXVJR2hsY21WY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JnWUdCY2JpQWdYRzRnSUNBZ1UybHRjR3hsSUVWNFlXMXdiR1ZjYmlBZ0lDQXRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDQmNiaUFnSUNCVGVXNWphSEp2Ym05MWN5QkZlR0Z0Y0d4bFhHNGdJRnh1SUNBZ0lHQmdZR3BoZG1GelkzSnBjSFJjYmlBZ0lDQnNaWFFnY21WemRXeDBPMXh1SUNCY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1ptbHVaRkpsYzNWc2RDZ3BPMXh1SUNBZ0lDQWdMeThnYzNWalkyVnpjMXh1SUNBZ0lIMGdZMkYwWTJnb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBdkx5Qm1ZV2xzZFhKbFhHNGdJQ0FnZlZ4dUlDQWdJR0JnWUZ4dUlDQmNiaUFnSUNCRmNuSmlZV05ySUVWNFlXMXdiR1ZjYmlBZ1hHNGdJQ0FnWUdCZ2FuTmNiaUFnSUNCbWFXNWtVbVZ6ZFd4MEtHWjFibU4wYVc5dUtISmxjM1ZzZEN3Z1pYSnlLWHRjYmlBZ0lDQWdJR2xtSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ptRnBiSFZ5WlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2MzVmpZMlZ6YzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJR0JnWUZ4dUlDQmNiaUFnSUNCUWNtOXRhWE5sSUVWNFlXMXdiR1U3WEc0Z0lGeHVJQ0FnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnSUNCbWFXNWtVbVZ6ZFd4MEtDa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFFwZTF4dUlDQWdJQ0FnTHk4Z2MzVmpZMlZ6YzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1S0hKbFlYTnZiaWw3WEc0Z0lDQWdJQ0F2THlCbVlXbHNkWEpsWEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUVGa2RtRnVZMlZrSUVWNFlXMXdiR1ZjYmlBZ0lDQXRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDQmNiaUFnSUNCVGVXNWphSEp2Ym05MWN5QkZlR0Z0Y0d4bFhHNGdJRnh1SUNBZ0lHQmdZR3BoZG1GelkzSnBjSFJjYmlBZ0lDQnNaWFFnWVhWMGFHOXlMQ0JpYjI5cmN6dGNiaUFnWEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdGMWRHaHZjaUE5SUdacGJtUkJkWFJvYjNJb0tUdGNiaUFnSUNBZ0lHSnZiMnR6SUNBOUlHWnBibVJDYjI5cmMwSjVRWFYwYUc5eUtHRjFkR2h2Y2lrN1hHNGdJQ0FnSUNBdkx5QnpkV05qWlhOelhHNGdJQ0FnZlNCallYUmphQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUdaaGFXeDFjbVZjYmlBZ0lDQjlYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRVZ5Y21KaFkyc2dSWGhoYlhCc1pWeHVJQ0JjYmlBZ0lDQmdZR0JxYzF4dUlDQmNiaUFnSUNCbWRXNWpkR2x2YmlCbWIzVnVaRUp2YjJ0ektHSnZiMnR6S1NCN1hHNGdJRnh1SUNBZ0lIMWNiaUFnWEc0Z0lDQWdablZ1WTNScGIyNGdabUZwYkhWeVpTaHlaV0Z6YjI0cElIdGNiaUFnWEc0Z0lDQWdmVnh1SUNCY2JpQWdJQ0JtYVc1a1FYVjBhRzl5S0daMWJtTjBhVzl1S0dGMWRHaHZjaXdnWlhKeUtYdGNiaUFnSUNBZ0lHbG1JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdabUZwYkhWeVpTaGxjbklwTzF4dUlDQWdJQ0FnSUNBdkx5Qm1ZV2xzZFhKbFhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUdacGJtUkNiMjl2YTNOQ2VVRjFkR2h2Y2loaGRYUm9iM0lzSUdaMWJtTjBhVzl1S0dKdmIydHpMQ0JsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GcGJIVnlaU2hsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzVnVaRUp2YjJ0ektHSnZiMnR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWVdsc2RYSmxLSEpsWVhOdmJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdaaGFXeDFjbVVvWlhKeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCemRXTmpaWE56WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUZCeWIyMXBjMlVnUlhoaGJYQnNaVHRjYmlBZ1hHNGdJQ0FnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0FnSUdacGJtUkJkWFJvYjNJb0tTNWNiaUFnSUNBZ0lIUm9aVzRvWm1sdVpFSnZiMnR6UW5sQmRYUm9iM0lwTGx4dUlDQWdJQ0FnZEdobGJpaG1kVzVqZEdsdmJpaGliMjlyY3lsN1hHNGdJQ0FnSUNBZ0lDOHZJR1p2ZFc1a0lHSnZiMnR6WEc0Z0lDQWdmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9jbVZoYzI5dUtYdGNiaUFnSUNBZ0lDOHZJSE52YldWMGFHbHVaeUIzWlc1MElIZHliMjVuWEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUVCdFpYUm9iMlFnZEdobGJseHVJQ0FnSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUc5dVJuVnNabWxzYkdWa1hHNGdJQ0FnUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYjI1U1pXcGxZM1JsWkZ4dUlDQWdJRlZ6WldaMWJDQm1iM0lnZEc5dmJHbHVaeTVjYmlBZ0lDQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZWeHVJQ0FxTDF4dUlDQjBhR1Z1T2lCMGFHVnVMRnh1WEc0Z0lDOHFLbHh1SUNBZ0lHQmpZWFJqYUdBZ2FYTWdjMmx0Y0d4NUlITjFaMkZ5SUdadmNpQmdkR2hsYmloMWJtUmxabWx1WldRc0lHOXVVbVZxWldOMGFXOXVLV0FnZDJocFkyZ2diV0ZyWlhNZ2FYUWdkR2hsSUhOaGJXVmNiaUFnSUNCaGN5QjBhR1VnWTJGMFkyZ2dZbXh2WTJzZ2IyWWdZU0IwY25rdlkyRjBZMmdnYzNSaGRHVnRaVzUwTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWjFibU4wYVc5dUlHWnBibVJCZFhSb2IzSW9LWHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZMjkxYkdSdUozUWdabWx1WkNCMGFHRjBJR0YxZEdodmNpY3BPMXh1SUNBZ0lIMWNiaUFnWEc0Z0lDQWdMeThnYzNsdVkyaHliMjV2ZFhOY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1ptbHVaRUYxZEdodmNpZ3BPMXh1SUNBZ0lIMGdZMkYwWTJnb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBdkx5QnpiMjFsZEdocGJtY2dkMlZ1ZENCM2NtOXVaMXh1SUNBZ0lIMWNiaUFnWEc0Z0lDQWdMeThnWVhONWJtTWdkMmwwYUNCd2NtOXRhWE5sYzF4dUlDQWdJR1pwYm1SQmRYUm9iM0lvS1M1allYUmphQ2htZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDQWdMeThnYzI5dFpYUm9hVzVuSUhkbGJuUWdkM0p2Ym1kY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JnWUdCY2JpQWdYRzRnSUNBZ1FHMWxkR2h2WkNCallYUmphRnh1SUNBZ0lFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHOXVVbVZxWldOMGFXOXVYRzRnSUNBZ1ZYTmxablZzSUdadmNpQjBiMjlzYVc1bkxseHVJQ0FnSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5WEc0Z0lDb3ZYRzRnSUNkallYUmphQ2M2SUdaMWJtTjBhVzl1SUY5allYUmphQ2h2YmxKbGFtVmpkR2x2YmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuUm9aVzRvYm5Wc2JDd2diMjVTWldwbFkzUnBiMjRwTzF4dUlDQjlYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQndiMng1Wm1sc2JDZ3BJSHRjYmlBZ0lDQjJZWElnYkc5allXd2dQU0IxYm1SbFptbHVaV1E3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdkc2IySmhiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnYkc5allXd2dQU0JuYkc5aVlXdzdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2MyVnNaaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnYkc5allXd2dQU0J6Wld4bU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyTmhiQ0E5SUVaMWJtTjBhVzl1S0NkeVpYUjFjbTRnZEdocGN5Y3BLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0c5c2VXWnBiR3dnWm1GcGJHVmtJR0psWTJGMWMyVWdaMnh2WW1Gc0lHOWlhbVZqZENCcGN5QjFibUYyWVdsc1lXSnNaU0JwYmlCMGFHbHpJR1Z1ZG1seWIyNXRaVzUwSnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdVQ0E5SUd4dlkyRnNMbEJ5YjIxcGMyVTdYRzVjYmlBZ0lDQnBaaUFvVUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0hKdmJXbHpaVlJ2VTNSeWFXNW5JRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjIxcGMyVlViMU4wY21sdVp5QTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNoUUxuSmxjMjlzZG1Vb0tTazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOcGJHVnVkR3g1SUdsbmJtOXlaV1JjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205dGFYTmxWRzlUZEhKcGJtY2dQVDA5SUNkYmIySnFaV04wSUZCeWIyMXBjMlZkSnlBbUppQWhVQzVqWVhOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzYjJOaGJDNVFjbTl0YVhObElEMGdVSEp2YldselpUdGNibjFjYmx4dUx5OGdVM1J5WVc1blpTQmpiMjF3WVhRdUxseHVVSEp2YldselpTNXdiMng1Wm1sc2JDQTlJSEJ2YkhsbWFXeHNPMXh1VUhKdmJXbHpaUzVRY205dGFYTmxJRDBnVUhKdmJXbHpaVHRjYmx4dWNtVjBkWEp1SUZCeWIyMXBjMlU3WEc1Y2JuMHBLU2s3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWxjell0Y0hKdmJXbHpaUzV0WVhCY2JpSmRmUT09Il19

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TownHalls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _classCallCheck(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}function setDefault(e,i,t){return i in e||(e[i]=t),e[i]}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,i){for(var t=0;t<i.length;t++){var n=i[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(i,t,n){return t&&e(i.prototype,t),n&&e(i,n),i}}(),MeetingStore=function(){function e(){_classCallCheck(this,e),this.meetings=[],this.phoneMeetings=[],this.meetingsByDate={},this.meetingsByOfficial={},this.meetingsByDivision={},this.phoneMeetingsByDivision={},this.officials=[],this.officialsByDivision={},this.phoneOnlyByDivision={}}return _createClass(e,[{key:"setOfficials",value:function(e){this.officials=e,this.setMeetingsFromOfficials(this.officials)}},{key:"getOfficials",value:function(){return this.officials}},{key:"setMeetingsFromOfficials",value:function(e){var i=this,t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.meetings=[],this.meetingsByDate={},this.officialsByDivision={},e.forEach(function(e){i.officialsByDivision[e.office.division.ocd_id]=e,e.meetings.forEach(function(t){t.official=e,i.addMeeting(t)})}),t&&this.sortMeetingsByDate(),this}},{key:"sortMeetingsByDate",value:function(){this.meetings.sort(function(e,i){return e.date>i.date?-1:e.date<i.date?1:0})}},{key:"addMeeting",value:function(e){this.meetings.push(e),"telephone"===e.meeting_type&&this.phoneMeetings.push(e),setDefault(this.meetingsByDate,e.date,[]).push(e),setDefault(this.meetingsByOfficial,e.official.id,[]).push(e);var i=e.official.office.division.ocd_id;return setDefault(this.meetingsByDivision,i,[]).push(e),setDefault(this.phoneMeetingsByDivision,i,[]).push(e),this.phoneMeetingsByDivision.length===this.meetingsByDivision.length?this.phoneOnlyByDivision[i]=!0:this.phoneOnlyByDivision[i]=!1,this}},{key:"getMeetings",value:function(){return this.meetings}},{key:"getPhoneMeetings",value:function(){return this.phoneMeetings}},{key:"getMeetingsForDate",value:function(e,i){var t=this.meetingsByDate[e];return t?i?t.filter(i):t:[]}},{key:"getMeetingsForOfficial",value:function(e){return this.meetingsByOfficial[e]}},{key:"getMeetingsForDivision",value:function(e){var i=this.meetingsByDivision[e];return i||[]}},{key:"getPhoneMeetingsForDivision",value:function(e){var i=this.phoneMeetingsByDivision[e];return i||[]}},{key:"getOfficialForDivision",value:function(e){return this.officialsByDivision[e]}},{key:"getAvgMeetings",value:function(){return Math.round(this.meetings.length/this.officials.length)}},{key:"getPercentPhoneMeetings",value:function(){return this.phoneMeetings.length/this.meetings.length}}]),e}();exports.default=MeetingStore;


},{}],2:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var i=t[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}(),VoteStore=function(){function e(){_classCallCheck(this,e),this.votes=[],this.votesByDivision={}}return _createClass(e,[{key:"setVotes",value:function(e){return this.votes=[],this.votesByDivision={},e.forEach(this.addVote,this),this}},{key:"addVote",value:function(e){this.votes.push(e),this.votesByDivision[e.ocd_id]=e}},{key:"getVotes",value:function(){return this.votes}},{key:"getVoteForDivision",value:function(e){return this.votesByDivision[e]}}]),e}();exports.default=VoteStore;


},{}],3:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.App=void 0;var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();require("core-js/fn/object/assign"),require("es6-promise/auto"),require("isomorphic-fetch");var _d=require("d3"),d3=_interopRequireWildcard(_d),_districtInAppalachia=require("appalachia/lib/cd/district-in-appalachia"),_districtInAppalachia2=_interopRequireDefault(_districtInAppalachia),_MeetingStore=require("./MeetingStore"),_MeetingStore2=_interopRequireDefault(_MeetingStore),_VoteStore=require("./VoteStore"),_VoteStore2=_interopRequireDefault(_VoteStore),_timeline=require("./timeline"),_timeline2=_interopRequireDefault(_timeline),_repsearch=require("./repsearch"),_repsearch2=_interopRequireDefault(_repsearch),_repcontext=require("./repcontext"),_repcontext2=_interopRequireDefault(_repcontext),App=exports.App=function(){function e(t){var i=this;_classCallCheck(this,e),this.timelineContainer=t.timelineContainer,this.repSearchContainer=t.repSearchContainer,this.repContextContainer=t.repContextContainer,this.googleApiKey=t.googleApiKey,this.labels=Object.assign({multipleDistrictsFound:"Found more than one districts matching this address.",noDistrictFound:"Could not find a district matching this address.",nonAppalachianRep:"This representative's district does not include one of the counties in Appalachia.  This app only provides information about representatives from Appalachia."},t.labels),this.meetingStore=new _MeetingStore2.default,this.voteStore=new _VoteStore2.default,this.startDate=t.startDate||new Date(2017,0,20),this.endDate=t.endDate||new Date,this.annotations=t.annotations||{"2017-01-20":{label:"Inauguration day"},"2017-02-20":{label:"District work period begins"},"2017-02-24":{label:"District work period ends"},"2017-04-10":{label:"District work period begins"},"2017-04-21":{label:"District work period ends"}},this.handleAddress=this.handleAddress.bind(this),this.handleReset=this.handleReset.bind(this),this.timeline=(0,_timeline2.default)(),this.search=(0,_repsearch2.default)().handleAddress(this.handleAddress).handleReset(this.handleReset),this.context=(0,_repcontext2.default)().labels(this.labels),this.allDays=[],this.searchAddress=null;var n=fetch(t.officialMeetingsJsonUrl).then(function(e){return e.json()}).then(function(e){return e.objects}),r=fetch(t.ahcaVotesJsonUrl).then(function(e){return e.json()}).then(function(e){return e.votes});Promise.all([n,r]).then(function(t){var n=t[0],r=t[1];i.meetingStore.setOfficials(n),i.voteStore.setVotes(r),i.allDays=e.meetingsByDay(i.meetingStore,i.startDate,i.endDate,i.annotations),i.renderTimeline(i.allDays),d3.select(i.repSearchContainer).call(i.search)})}return _createClass(e,[{key:"handleReset",value:function(){null!==this.searchAddress&&(this.renderTimeline(this.allDays),d3.select(this.repContextContainer).datum(null).call(this.context))}},{key:"renderTimeline",value:function(e){d3.select(this.timelineContainer).datum(e).call(this.timeline,this.ahcaVoteForDivision.bind(this))}},{key:"handleAddress",value:function(t,i){var n=this;this.searchAddress=t;var r="https://content.googleapis.com/civicinfo/v2/representatives?address="+encodeURIComponent(t)+"&includeOffices=false&levels=country&roles=legislatorLowerBody&alt=json&key="+this.googleApiKey;fetch(r).then(function(e){return e.json()}).then(function(t){if(!t||t.error)return void i({msg:n.labels.noDistrictFound},null);var r=Object.keys(t.divisions);1!==r.length&&i({msg:0===r.length?n.labels.noDistrictFound:n.labels.multipleDistrictsFound},null);var a=r[0],s=e.parseOcdId(a);if(!(0,_districtInAppalachia2.default)(s.state,s.cd))return void i({msg:n.labels.nonAppalachianRep},null);i(null,{});var o=n.meetingStore.getMeetingsForDivision(r[0]),l={};o.forEach(function(e){l[e.id]=!0}),d3.select(n.repContextContainer).datum({official:n.meetingStore.getOfficialForDivision(a),numMeetings:o.length,avgMeetings:n.meetingStore.getAvgMeetings(),districtName:t.divisions[a].name,numPhoneMeetings:n.meetingStore.getPhoneMeetingsForDivision(a).length,pctPhoneMeetings:n.meetingStore.getPercentPhoneMeetings(),ahcaVote:n.ahcaVoteForDivision(a)}).call(n.context);var c=e.meetingsByDay(n.meetingStore,n.startDate,n.endDate,n.annotations,function(e){return l[e.id]});n.renderTimeline(c)})}},{key:"ahcaVoteForDivision",value:function(e){return this.voteStore.getVoteForDivision(e).vote_position.toLowerCase()}}],[{key:"parseOcdId",value:function(e){var t=e.split("/"),i=t[t.length-1].split(":");return{state:t[t.length-2].split(":")[1].toUpperCase(),cd:i[1]}}},{key:"meetingsByDay",value:function(e,t,i,n,r){var a=[],s=d3.timeFormat("%Y-%m-%d");return d3.timeDay.range(t,i,1).forEach(function(t,i){var o=s(t),l=e.getMeetingsForDate(o,r);(0!==l.length||n[o])&&a.push({day:i+1,date:t,meetings:l,label:n[o]?n[o].label:null})}),a.reverse()}}]),e}();


},{"./MeetingStore":1,"./VoteStore":2,"./repcontext":4,"./repsearch":5,"./timeline":6,"appalachia/lib/cd/district-in-appalachia":"appalachia/lib/cd/district-in-appalachia","core-js/fn/object/assign":"core-js/fn/object/assign","d3":"d3","es6-promise/auto":9,"isomorphic-fetch":"isomorphic-fetch"}],4:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function officialLastName(e){var t=e.name.split(" ");return t[t.length-1]}function repContext(){var e=Object.assign({},DEFAULT_LABELS),t=function(t){t.each(function(t){var n=d3.select(this);if(n.selectAll("*").remove(),t){var i=n.append("div").attr("class","representative-context");t.districtName&&i.append("span").text(e.districtName(t)),t.official&&i.append("span").text(e.officialName(t)),t.numMeetings===t.avgMeetings?i.append("span").text(e.avgMeetings(t)):t.numMeetings>t.avgMeetings?i.append("span").text(e.aboveAvgMeetings(t)):i.append("span").text(e.belowAvgMeetings(t)),0===t.numPhoneMeetings?i.append("span").text(e.noPhoneMeetings(t)):i.append("span").text(e.phoneMeetings(t)),i.append("span").text(e.ahcaVote(t))}})};return t.labels=function(n){return n?(e=Object.assign(e,n),t):e},t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=repContext,require("core-js/fn/object/assign");var _d=require("d3"),d3=_interopRequireWildcard(_d),_utils=require("./utils"),DEFAULT_LABELS={districtName:function(e){return"This address is in "+e.districtName+"."},officialName:function(e){return"The representative for this district is "+e.official.name+"."},avgMeetings:function(e){return"This representative has held "+(0,_utils.apStyleNumber)(e.numMeetings)+" "+(0,_utils.pluralize)("meeting",e.numMeetings)+", the average for Appalachian representatives."},aboveAvgMeetings:function(e){return"This representative has held "+(0,_utils.apStyleNumber)(e.numMeetings)+" "+(0,_utils.pluralize)("meeting",e.numMeetings)+", more than the average for Appalachian representatives."},belowAvgMeetings:function(e){var t=0===e.numMeetings?"no":e.numMeetings;return"This representative has held "+(0,_utils.apStyleNumber)(t)+" "+(0,_utils.pluralize)("meeting",e.numMeetings)+", below the average of "+(0,_utils.apStyleNumber)(e.avgMeetings)+" for Appalachian representatives."},noPhoneMeetings:function(e){return"This representative hasn't held any phone meetings. "+(0,_utils.pctFormat)(e.pctPhoneMeetings)+" percent of all meetings were held over the phone."},phoneMeetings:function(e){return"This representative held "+(0,_utils.apStyleNumber)(e.numPhoneMeetings)+" "+(0,_utils.pluralize)("meeting",e.numPhoneMeetings)+" over the phone.  "+(0,_utils.pctFormat)(e.pctPhoneMeetings)+" percent of all meetings were held over the phone."},ahcaVote:function(e){return officialLastName(e.official)+' voted "'+e.ahcaVote+'" on the American Healthcare Act.'}};


},{"./utils":7,"core-js/fn/object/assign":"core-js/fn/object/assign","d3":"d3"}],5:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function repSearch(){var e=function(){},t=function(){},r=null,n=function(e){if(e)return void r.text(e.msg);r.text("")},a=function(){d3.event.preventDefault();var t=d3.select(d3.event.target),a=t.select(".representative-search-form__address-input").node().value;return!!a&&(r=t.select(".representative-search-form__messages"),e(a,n),!0)},s=function(e){e.each(function(){var e=d3.select(this);e.selectAll("*").remove();var n=e.append("form").attr("class","representative-search-form").on("submit",a);n.append("input").attr("type","text").attr("class","representative-search-form__address-input").attr("placeholder","Enter your address"),n.append("button").attr("type","submit").text("Find your representative").attr("class","representative-search-form__btn representative-search-form__btn--submit"),n.append("button").attr("type","reset").text("Start over").on("click",function(){r.text(""),r.selectAll("*").remove(),t()}).attr("class","representative-search-form__btn representative-search-form__btn--reset"),n.append("div").attr("class","representative-search-form__messages")})};return s.handleAddress=function(t){return t?(e=t,s):e},s.handleReset=function(e){return e?(t=e,s):t},s}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=repSearch;var _d=require("d3"),d3=_interopRequireWildcard(_d);


},{"d3":"d3"}],6:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t}function ocdIdToDistrict(e){var t=e.split(":");return t[t.length-2].slice(0,2).toUpperCase()+"-"+t[t.length-1]}function officialDistrict(e){return ocdIdToDistrict(e.office.division.ocd_id)}function meetingsByOfficial(e){var t={};return e.forEach(function(e){t[e.official.id]||(t[e.official.id]={official:e.official,meetings:[]}),t[e.official.id].meetings.push(e)}),d3.values(t)}function getPartyLabel(e){return{Republican:"R",Democratic:"D"}[e]}function renderOfficial(e,t){e.each(function(e){var i=d3.select(this),n=getPartyLabel(e.official.party),a="timeline__meeting__official";n&&(a+=" timeline__meeting__official--"+n.toLowerCase()),i.append("span").attr("class",a).text(e.official.name),n&&i.append("span").attr("class","timeline__meeting__party timeline__meeting__party--"+n.toLowerCase()).text(" ("+n+")"),i.append("span").attr("class","timeline__meeting__district").text(" ("+officialDistrict(e.official)+")"),1===e.meetings.length&&("telephone"===e.meetings[0].meeting_type?i.append("span").attr("title","Telephone meeting").attr("class","timeline__meeting__type timeline__meeting__type--telephone").text(" ☎"):"facebook"===e.meetings[0].meeting_type?i.append("span").attr("class","timeline__meeting__type timeline__meeting__type--facebook").attr("title","Facebook meeting").text(" f"):"radio"===e.meetings[0].meeting_type&&i.append("span").attr("class","timeline__meeting__type timeline__meeting__type--radio").attr("title","Radio meeting").text(" 📻"));var l=t(e.official.office.division.ocd_id);i.append("span").attr("class","ahca-vote--"+l).attr("title","Voted "+l+" on the AHCA").text(function(){return"yes"===l?" ✔":" ❌"}),e.meetings.length>1&&i.append("span").attr("class","timeline__meeting__count").text(" x"+e.meetings.length)})}function renderDay(e,t,i){e.append("h2").attr("class","timeline__day__number").text(function(e){return e.day}),e.append("div").attr("class","timeline__day__date").text(function(e){return t(e.date)}),e.append("div").attr("class","timeline__day__label").text(function(e){return e.label}),e.selectAll(".timeline__meeting").data(function(e){return meetingsByOfficial(e.meetings)}).enter().append("div").attr("class","timeline__meeting").call(renderOfficial,i)}function meetingTimeline(){function e(e,i){e.each(function(e){var n=d3.select(this);n.selectAll("*").remove();var a=n.append("div").attr("class","timeline");a.selectAll(".timeline__day").data(e).enter().append("div").attr("class","timeline__day").call(renderDay,t,i),a.selectAll(".timeline__day__number").each(function(e,t){if(0===t){var i=d3.select(this),n=i.text();i.text(""),i.append("span").attr("class","timeline__day__day-label").text("Day "),i.append("span").text(n)}})})}var t=d3.timeFormat("%B %d, %Y");return e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=meetingTimeline;var _d=require("d3"),d3=_interopRequireWildcard(_d);


},{"d3":"d3"}],7:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r.default=e,r}function pluralize(e,r,t){return 1===r?e:t||e+"s"}function pctFormat(e){return d3.format(".0%")(e).replace("%","")}function apStyleNumber(e){var r={1:"one",2:"two",3:"three",4:"four",5:"five",6:"six",7:"seven",8:"eight",9:"nine"};return e>0&&e<10?r[e]:e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.pluralize=pluralize,exports.pctFormat=pctFormat,exports.apStyleNumber=apStyleNumber;var _d=require("d3"),d3=_interopRequireWildcard(_d);


},{"d3":"d3"}],8:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],9:[function(require,module,exports){
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');
'use strict';
module.exports = require('./').polyfill();

},{"./":10}],10:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   4.1.0
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  return typeof x === 'function' || typeof x === 'object' && x !== null;
}

function isFunction(x) {
  return typeof x === 'function';
}

var _isArray = undefined;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

var isArray = _isArray;

var len = 0;
var vertxNext = undefined;
var customSchedulerFn = undefined;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var r = require;
    var vertx = r('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = undefined;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && typeof require === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var _arguments = arguments;

  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;

  if (_state) {
    (function () {
      var callback = _arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    })();
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(16);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var GET_THEN_ERROR = new ErrorObject();

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    GET_THEN_ERROR.error = error;
    return GET_THEN_ERROR;
  }
}

function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        _resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      _reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      _reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    _reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return _resolve(promise, value);
    }, function (reason) {
      return _reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$) {
  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$ === GET_THEN_ERROR) {
      _reject(promise, GET_THEN_ERROR.error);
      GET_THEN_ERROR.error = null;
    } else if (then$$ === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$)) {
      handleForeignThenable(promise, maybeThenable, then$$);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function _resolve(promise, value) {
  if (promise === value) {
    _reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function _reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;

  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = undefined,
      callback = undefined,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function ErrorObject() {
  this.error = null;
}

var TRY_CATCH_ERROR = new ErrorObject();

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = undefined,
      error = undefined,
      succeeded = undefined,
      failed = undefined;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      _reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
      _resolve(promise, value);
    } else if (failed) {
      _reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      _reject(promise, value);
    }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      _resolve(promise, value);
    }, function rejectPromise(reason) {
      _reject(promise, reason);
    });
  } catch (e) {
    _reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function Enumerator(Constructor, input) {
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) {
    makePromise(this.promise);
  }

  if (isArray(input)) {
    this._input = input;
    this.length = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) {
      fulfill(this.promise, this._result);
    } else {
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) {
        fulfill(this.promise, this._result);
      }
    }
  } else {
    _reject(this.promise, validationError());
  }
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
};

Enumerator.prototype._enumerate = function () {
  var length = this.length;
  var _input = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) {
    this._eachEntry(_input[i], i);
  }
};

Enumerator.prototype._eachEntry = function (entry, i) {
  var c = this._instanceConstructor;
  var resolve$$ = c.resolve;

  if (resolve$$ === resolve) {
    var _then = getThen(entry);

    if (_then === then && entry._state !== PENDING) {
      this._settledAt(entry._state, i, entry._result);
    } else if (typeof _then !== 'function') {
      this._remaining--;
      this._result[i] = entry;
    } else if (c === Promise) {
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, _then);
      this._willSettleAt(promise, i);
    } else {
      this._willSettleAt(new c(function (resolve$$) {
        return resolve$$(entry);
      }), i);
    }
  } else {
    this._willSettleAt(resolve$$(entry), i);
  }
};

Enumerator.prototype._settledAt = function (state, i, value) {
  var promise = this.promise;

  if (promise._state === PENDING) {
    this._remaining--;

    if (state === REJECTED) {
      _reject(promise, value);
    } else {
      this._result[i] = value;
    }
  }

  if (this._remaining === 0) {
    fulfill(promise, this._result);
  }
};

Enumerator.prototype._willSettleAt = function (promise, i) {
  var enumerator = this;

  subscribe(promise, undefined, function (value) {
    return enumerator._settledAt(FULFILLED, i, value);
  }, function (reason) {
    return enumerator._settledAt(REJECTED, i, reason);
  });
};

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {function} resolver
  Useful for tooling.
  @constructor
*/
function Promise(resolver) {
  this[PROMISE_ID] = nextId();
  this._result = this._state = undefined;
  this._subscribers = [];

  if (noop !== resolver) {
    typeof resolver !== 'function' && needsResolver();
    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  }
}

Promise.all = all;
Promise.race = race;
Promise.resolve = resolve;
Promise.reject = reject;
Promise._setScheduler = setScheduler;
Promise._setAsap = setAsap;
Promise._asap = asap;

Promise.prototype = {
  constructor: Promise,

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
  */
  then: then,

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
  */
  'catch': function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};

function polyfill() {
    var local = undefined;

    if (typeof global !== 'undefined') {
        local = global;
    } else if (typeof self !== 'undefined') {
        local = self;
    } else {
        try {
            local = Function('return this')();
        } catch (e) {
            throw new Error('polyfill failed because global object is unavailable in this environment');
        }
    }

    var P = local.Promise;

    if (P) {
        var promiseToString = null;
        try {
            promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
            // silently ignored
        }

        if (promiseToString === '[object Promise]' && !P.cast) {
            return;
        }
    }

    local.Promise = Promise;
}

// Strange compat..
Promise.polyfill = polyfill;
Promise.Promise = Promise;

return Promise;

})));


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"_process":8}]},{},[3])(3)
});
//# sourceMappingURL=data:application/json;base64,
